// Copyright Takamitsu Endo (ryukau@gmail.com)
// SPDX-License-Identifier: Apache-2.0

/*
`docs/resonant_filter.md` provides an extra documentation of this file.

Below is a block diagram of common filter structure in this file:

```
input -+--------> (main filter) --------+-> output
       â†‘                                |
       +- (gain) <- (feedback filter) <-+
```

`gain` is called `resonance` or `q` in code.

There's an ad-hoc convention for naming. It is `Resonant(main filter)(feedback filter)`.
For example on `ResonantLowpass1A1`:

- `Resonant` means it is a resonant filter, which is a family of filters written here.
- `Lowpass1` means order 1 lowpass (-6 dB/oct) is used for main filter.
- `A1` means order 1 allpass is used for feedback filter.
  - `A` for allpass.
  - `B` for bandpass.
  - `L` for lowpass.
  - `H` for highpass.
  - And so on.

Some abbreviations:

- `BLT` or `Blt` mean bilinear transform.
- `EMA` or `Ema` mean exponential moving average.

This convention might be changed later, because following variations aren't considered.

- Variety of Q for main and feedback filters,
- Filter discretization method like bilinear or not,
*/

import {clamp} from "../util.js";

export const filterTypeItems = [
  "Bypass",
  "EmaLowpass1A1",
  "Lowpass1A1",
  "Lowpass1H1",
  "Lowpass1H1Alt",
  "BroadPeakingLowpass",
  "Lowpass2A2",
  "CascadedLowpass1",
  "SpringDamperLowpass3 - A",
  "SpringDamperLowpass3 - B",
  "SpringDamperLowpass3 - C",
  "SpringDamperLowpass3 - D",
  "DoubleSpringFilter4 - A",
  "DoubleSpringFilter4 - B",
];

export function selectFilter(sampleRate, filterType, nCascade) {
  switch (filterTypeItems[filterType]) {
    case "Bypass":
      return new Bypass();
    default:
    case "EmaLowpass1A1":
      return new CascadedResonantEmaLowpass1A1(nCascade);
    case "Lowpass1A1":
      return new CascadedResonantLowpass1A1(nCascade);
    case "Lowpass1H1":
      return new CascadedResonantLowpass1H1(nCascade);
    case "Lowpass1H1Alt":
      return new CascadedResonantLowpass1H1Alt(nCascade);
    case "BroadPeakingLowpass":
      return new CascadedBroadPeakingLowpass(nCascade);
    case "Lowpass2A2":
      return new CascadedResonantLowpass2A2(nCascade);
    case "CascadedLowpass1":
      return new CascadedLowpass1(nCascade);
    case "SpringDamperLowpass3 - A":
      return new SpringDamperLowpass3(nCascade, sampleRate, 0);
    case "SpringDamperLowpass3 - B":
      return new SpringDamperLowpass3(nCascade, sampleRate, 1);
    case "SpringDamperLowpass3 - C":
      return new SpringDamperLowpass3(nCascade, sampleRate, 2);
    case "SpringDamperLowpass3 - D":
      return new SpringDamperLowpass3(nCascade, sampleRate, 3);
    case "DoubleSpringFilter4 - A":
      return new DoubleSpringFilter4(nCascade, sampleRate, 0);
    case "DoubleSpringFilter4 - B":
      return new DoubleSpringFilter4(nCascade, sampleRate, 1);
  }
};

// Dummy class for `selectFilter`.
class Bypass {
  reset() {}
  process(input) { return input; }
}

// Reference:
// https://ryukau.github.io/filter_notes/resonant_one_pole_filter/resonant_one_pole_filter.html
export class ResonantEmaLowpass1A1 {
  constructor() { this.reset(); }

  reset() {
    this.v1 = 0;
    this.u1 = 0;
    this.u2 = 0;
  }

  // `resonance` is in [0, 1].
  // `apScale` is in [0, 1].
  process(input, cutoffNormalized, resonance, apScale) {
    const freq = Math.PI * clamp(cutoffNormalized, 0, 0.4999);

    const s = 1 - Math.cos(2 * freq);
    const c1 = Math.sqrt(s * s + 2 * s) - s;

    const t = Math.tan(apScale * freq);
    const c2 = (t - 1) / (t + 1);

    const q = resonance * (c2 - c1 * c2 + 1);

    // Bilinear allpass, order 1.
    this.v1 = c2 * (this.u1 - this.v1) + this.u2;
    this.u2 = this.u1;

    // Exponential moving average (EMA) lowpass.
    return this.u1 += c1 * (input - this.u1) - q * this.v1;
  }
}

export class CascadedResonantEmaLowpass1A1 {
  constructor(nCascade) {
    this.v1 = new Array(nCascade).fill(0);
    this.u1 = new Array(nCascade).fill(0);
    this.u2 = new Array(nCascade).fill(0);
  }

  reset() {
    this.v1.fill(0);
    this.u1.fill(0);
    this.u2.fill(0);
  }

  // `resonance` is in [0, 1].
  // `apScale` is in [0, 1].
  process(input, cutoffNormalized, resonance, apScale) {
    const freq = Math.PI * clamp(cutoffNormalized, 0, 0.4999);

    const s = 1 - Math.cos(2 * freq);
    const c1 = Math.sqrt(s * s + 2 * s) - s;

    const t = Math.tan(apScale * freq);
    const c2 = (t - 1) / (t + 1);

    const q = resonance * (c2 - c1 * c2 + 1);

    for (let idx = 0; idx < this.v1.length; ++idx) {
      this.v1[idx] = c2 * (this.u1[idx] - this.v1[idx]) + this.u2[idx];
      this.u2[idx] = this.u1[idx];
      this.u1[idx] += c1 * (input - this.u1[idx]) - q * this.v1[idx];
      input = this.u1[idx];
    }
    return input;
  }
}

/**
This filter is sensitive to the change of cutoff. May blow up when cutoff is modulated too
fast.
*/
export class ResonantLowpass1A1 {
  constructor() { this.reset(); }

  reset() {
    this.v1 = 0;
    this.x1 = 0;
    this.y1 = 0;
    this.y2 = 0;
  }

  // `resonance` is in [0, 1].
  process(input, cutoffNormalized, resonance) {
    const cutoffBounded = clamp(cutoffNormalized, 0, 0.4999);
    const t = Math.tan(Math.PI * cutoffBounded);
    const a1 = (t - 1) / (t + 1);
    const safetyCurve = Math.cos(Math.PI * cutoffBounded); // To prevent blow up.
    const reso = resonance * (a1 + 1) * safetyCurve;
    const gain = (1 + a1 + reso) / 2;

    // Bilinear allpass, order 1.
    this.v1 = a1 * (this.y1 - this.v1) + this.y2;
    this.y2 = this.y1;

    // Bilinear lowpass, order 1.
    this.y1 = gain * (input + this.x1) - a1 * this.y1 - reso * this.v1;
    this.x1 = input;
    return this.y1;
  }
}

export class CascadedResonantLowpass1A1 {
  constructor(nCascade) {
    this.v1 = new Array(nCascade).fill(0);
    this.x1 = new Array(nCascade).fill(0);
    this.y1 = new Array(nCascade).fill(0);
    this.y2 = new Array(nCascade).fill(0);
  }

  reset() {
    this.v1.fill(0);
    this.x1.fill(0);
    this.y1.fill(0);
    this.y2.fill(0);
  }

  // `resonance` is in [0, 1].
  process(input, cutoffNormalized, resonance) {
    const cutoffBounded = clamp(cutoffNormalized, 0, 0.4999);
    const t = Math.tan(Math.PI * cutoffBounded);
    const a1 = (t - 1) / (t + 1);
    const safetyCurve = Math.cos(Math.PI * cutoffBounded); // To prevent blow up.
    const reso = resonance * (a1 + 1) * safetyCurve;
    const gain = (1 + a1 + reso) / 2;

    for (let idx = 0; idx < this.v1.length; ++idx) {
      this.v1[idx] = a1 * (this.y1[idx] - this.v1[idx]) + this.y2[idx];
      this.y2[idx] = this.y1[idx];

      this.y1[idx]
        = gain * (input + this.x1[idx]) - a1 * this.y1[idx] - reso * this.v1[idx];
      this.x1[idx] = input;
      input = this.y1[idx];
    }
    return input;
  }
}

export class ResonantLowpass1H1 {
  constructor() { this.reset(); }

  reset() {
    this.x1H = 0;
    this.y1H = 0;
    this.x1L = 0;
    this.y1L = 0;
  }

  // `resonance` is in [-1, 1]. Negative value is allowed.
  process(input, cutoffNormalized, resonance) {
    const t = Math.tan(Math.PI * clamp(cutoffNormalized, 0, 0.4999));
    const a1 = (1 - t) / (1 + t);
    const bH = 1 / (1 + t);
    const bL = t / (1 + t);
    const resonanceScaler
      = resonance < 0 ? (a1 + 1) * (a1 + 1) / (2 * bH) : (4 - (a1 + 1) * (a1 + 1) / bH);
    const reso = resonance * resonanceScaler;

    // Bilinear highpass, order 1.
    this.y1H = bH * (this.y1L - this.x1H) + a1 * this.y1H;
    this.x1H = this.y1L;

    // Bilinear lowpass, order 1.
    this.y1L = bL * (input + this.x1L) + a1 * this.y1L + reso * this.y1H;
    this.x1L = input;
    return this.y1L;
  }
}

export class CascadedResonantLowpass1H1 {
  constructor(nCascade) {
    this.x1H = new Array(nCascade).fill(0);
    this.y1H = new Array(nCascade).fill(0);
    this.x1L = new Array(nCascade).fill(0);
    this.y1L = new Array(nCascade).fill(0);
  }

  reset() {
    this.x1H.fill(0);
    this.y1H.fill(0);
    this.x1L.fill(0);
    this.y1L.fill(0);
  }

  // `resonance` is in [-1, 1]. Negative value is allowed.
  process(input, cutoffNormalized, resonance) {
    const t = Math.tan(Math.PI * clamp(cutoffNormalized, 0, 0.4999));
    const a1 = (1 - t) / (1 + t);
    const bH = 1 / (1 + t);
    const bL = t / (1 + t);
    const resonanceScaler
      = resonance < 0 ? (a1 + 1) * (a1 + 1) / (2 * bH) : (4 - (a1 + 1) * (a1 + 1) / bH);
    const reso = resonance * resonanceScaler;

    for (let idx = 0; idx < this.x1H.length; ++idx) {
      this.y1H[idx] = bH * (this.y1L[idx] - this.x1H[idx]) + a1 * this.y1H[idx];
      this.x1H[idx] = this.y1L[idx];

      this.y1L[idx]
        = bL * (input + this.x1L[idx]) + a1 * this.y1L[idx] + reso * this.y1H[idx];
      this.x1L[idx] = input;
      input = this.y1L[idx];
    }
    return input;
  }
}

// Almost same as `ResonantLowpass1H1`, but feed position is altered.
export class ResonantLowpass1H1Alt {
  constructor() { this.reset(); }

  reset() {
    this.x1H = 0;
    this.y1H = 0;
    this.x1L = 0;
    this.y1L = 0;
  }

  // `resonance` is in [0, 1].
  process(input, cutoffNormalized, resonance) {
    const t = Math.tan(Math.PI * clamp(cutoffNormalized, 0, 0.4999));
    const a1 = (1 - t) / (1 + t);
    const bH = 1 / (1 + t);
    const bL = t / (1 + t);
    const reso = 4 * resonance;

    // Bilinear highpass, order 1.
    this.y1H = bH * (this.y1L - this.x1H) + a1 * this.y1H;
    this.x1H = this.y1L;

    // Bilinear lowpass, order 1.
    this.y1L = bL * (input + this.x1L + reso * this.y1H) + a1 * this.y1L;
    this.x1L = input;
    return this.y1L;
  }
}

export class CascadedResonantLowpass1H1Alt {
  constructor(nCascade) {
    this.x1H = new Array(nCascade).fill(0);
    this.y1H = new Array(nCascade).fill(0);
    this.x1L = new Array(nCascade).fill(0);
    this.y1L = new Array(nCascade).fill(0);
  }

  reset() {
    this.x1H.fill(0);
    this.y1H.fill(0);
    this.x1L.fill(0);
    this.y1L.fill(0);
  }

  // `resonance` is in [0, 1].
  process(input, cutoffNormalized, resonance) {
    const t = Math.tan(Math.PI * clamp(cutoffNormalized, 0, 0.4999));
    const a1 = (1 - t) / (1 + t);
    const bH = 1 / (1 + t);
    const bL = t / (1 + t);
    const reso = 4 * resonance;

    for (let idx = 0; idx < this.x1H.length; ++idx) {
      this.y1H[idx] = bH * (this.y1L[idx] - this.x1H[idx]) + a1 * this.y1H[idx];
      this.x1H[idx] = this.y1L[idx];

      this.y1L[idx]
        = bL * (input + this.x1L[idx] + reso * this.y1H[idx]) + a1 * this.y1L[idx];
      this.x1L[idx] = input;
      input = this.y1L[idx];
    }
    return input;
  }
}

/**
`BroadPeakingLowpass` is different from other `Resonant` filters. Block diagram is shown
below.

```
input -> (lowpass) -+---------------+-> output
                    |               â†‘
                    +-> (highpass) -+
```

A cascade from lowpass to highpass becomes bandpass. So this is basically a sum of a
lowpass and a bandpass.
*/
export class BroadPeakingLowpass {
  constructor() {
    this.reset();

    // +60 dB when `resonance` is 1.
    this.resoScaler = 3 * Math.log(10);
  }

  reset() {
    this.x1L = 0;
    this.y1L = 0;
    this.x1H = 0;
    this.y1H = 0;
  }

  // `resonance` is in [0, 1].
  process(input, cutoffNormalized, resonance) {
    const t = Math.tan(Math.PI * clamp(cutoffNormalized, 0, 0.4999));
    const a1 = (1 - t) / (1 + t);
    const bL = t / (1 + t);
    const bH = 1 / (1 + t);
    const mix = Math.exp(this.resoScaler * resonance);

    // Bilinear lowpass, order 1.
    this.y1L = bL * (input + this.x1L) + a1 * this.y1L;
    this.x1L = input;

    // Bilinear highpass, order 1.
    this.y1H = bH * (this.y1L - this.x1H) + a1 * this.y1H;
    this.x1H = this.y1L;
    return this.y1L + mix * this.y1H;
  }
}

export class CascadedBroadPeakingLowpass {
  constructor(nCascade) {
    this.x1L = new Array(nCascade).fill(0);
    this.y1L = new Array(nCascade).fill(0);
    this.x1H = new Array(nCascade).fill(0);
    this.y1H = new Array(nCascade).fill(0);

    // +60 dB when `resonance` is 1.
    this.resoScaler = 3 * Math.log(10);
  }

  reset() {
    this.x1L.fill(0);
    this.y1L.fill(0);
    this.x1H.fill(0);
    this.y1H.fill(0);
  }

  // `resonance` is in [0, 1].
  process(input, cutoffNormalized, resonance) {
    const t = Math.tan(Math.PI * clamp(cutoffNormalized, 0, 0.4999));
    const a1 = (1 - t) / (1 + t);
    const bL = t / (1 + t);
    const bH = 1 / (1 + t);
    const mix = Math.exp(this.resoScaler * resonance);

    for (let idx = 0; idx < this.x1L.length; ++idx) {
      this.y1L[idx] = bL * (input + this.x1L[idx]) + a1 * this.y1L[idx];
      this.x1L[idx] = input;

      this.y1H[idx] = bH * (this.y1L[idx] - this.x1H[idx]) + a1 * this.y1H[idx];
      this.x1H[idx] = this.y1L[idx];
      input = this.y1L[idx] + mix * this.y1H[idx];
    }
    return input;
  }
}

export class CascadedResonantLowpass2A2 {
  #qTable = [
    0.000000000000000,     0.6817937575690126,    0.6687618357481768,
    0.6796440492949124,    0.6895065555123012,    0.6843421496611362,
    0.6810191209116294,    0.6680676153691857,    0.6673695037062964,
    0.667468867902032,     0.6678291539579152,    0.6682487087269612,
    0.668557365045038,     0.6685762038600748,    0.6682949615699989,
    0.667914190275402,     0.6676048435970997,    0.6674445620356414,
    0.6675001902426668,    0.6680329388697636,    0.6707399065489869,
    0.6705795897788073,    0.6704384325889877,    0.6680393275362099,
    0.6676136171520458,    0.6701078879619033,    0.6700211459218618,
    0.6683913747810131,    0.6677662741262353,    0.6698170022171188,
    0.6697634006002253,    0.6678359076137091,    0.6696756065282231,
    0.6682728255900322,    0.6685646613228151,    0.6695803380467901,
    0.6680189962588238,    0.6695370504475532,    0.6680416460303984,
    0.66950669595316,      0.6681180795324354,    0.6694874014112572,
    0.6683324912337296,    0.6694776214077961,    0.6694759883407894,
    0.6682976193234941,    0.6694779150000673,    0.6694816878834503,
    0.6684353217518089,    0.6694933192892724,    0.6695014626233998,
    0.6684868715866361,    0.6688689776260209,    0.6695329184885225,
    0.6695457817116421,    0.6687379171323353,    0.6686648677180871,
    0.668913247579032,     0.6696066817424128,    0.6696242736005605,
    0.6696424742754992,    0.6696615270525117,    0.6696812573631392,
    0.669701724868107,     0.6697229108347958,    0.6697445505307843,
    0.6697670096587434,    0.669789994213174,     0.6698134842501398,
    0.6698374448014743,    0.6698619726546385,    0.6698870052899811,
    0.6699126218453012,    0.669424118158659,     0.6693226114885209,
    0.6694650933898887,    0.6700192601538507,    0.670046922406732,
    0.6696746697315415,    0.6695157377769182,    0.6701322564324144,
    0.6701613923653421,    0.6696634834432162,    0.6700377811080064,
    0.6706543714513504,    0.6720158241714197,    0.670075076204923,
    0.6720283200758501,    0.6720341222218692,    0.6700477843468001,
    0.6720520202852389,    0.6720604624482557,    0.6701320101954781,
    0.6720828264316265,    0.6708567269852016,    0.6707169851001534,
    0.672120341554193,     0.6703299309252169,    0.6721496382556892,
    0.671492282280864,     0.6707851607187109,    0.6721977977988421,
    0.6705057665032771,    0.6722334942504351,    0.6709354801136344,
    0.6722709737290825,    0.6722897614840478,    0.670879811900624,
    0.6723302594294215,    0.6707818070068096,    0.6723731767442543,
    0.6709315245401895,    0.6724183281133889,    0.6712331820612691,
    0.6724645241834644,    0.6717190908860726,    0.6725131053580327,
    0.6725369534252699,    0.6720527297638785,    0.6725872066938965,
    0.6717778487260745,    0.6726387351048643,    0.6718309025844047,
    0.6726928156072209,    0.672114645177408,     0.67274765680464,
    0.6727759201091591,    0.6722728048213313,    0.6728323478992972,
    0.671923123153612,     0.6728906318343979,    0.6717787696771655,
    0.6729502023744713,    0.6717692736825769,    0.6730106835420081,
    0.6719227866962518,    0.6730724778482885,    0.6728736807247615,
    0.6724714678055381,    0.6731670986776846,    0.6720983323295588,
    0.6732315723924918,    0.6722312426237559,    0.6732969109126639,
    0.6733308014809339,    0.6723932245012233,    0.673397069119624,
    0.6724230973282113,    0.6734650244613942,    0.6734992887952279,
    0.6725359306885733,    0.6735694758542018,    0.6728884089686747,
    0.6729650206924033,    0.6736740570133152,    0.6727580583421044,
    0.6737455916917426,    0.6737818484358088,    0.6728508837468685,
    0.673854531307594,     0.6738916173132146,    0.6729841802164022,
    0.6739646045336583,    0.6740019367827202,    0.6731174054362039,
    0.6740764364163281,    0.6741143176864994,    0.6732642584253133,
    0.6741906232217665,    0.6742288198862495,    0.6735010921760175,
    0.6736526095427353,    0.6743451246655278,    0.6743834940791146,
    0.673582655445747,     0.6744617989820182,    0.6745015263412538,
    0.6738030212342517,    0.6739088516814183,    0.6746210678866775,
    0.6746612347241872,    0.6739109784571116,    0.6742302730337661,
    0.6747825181857995,    0.6748237249290894,    0.6740964984829556,
    0.6743531287981694,    0.6749464022356225,    0.6749871600686228,
    0.6743557394866628,    0.6743759444881208,    0.6751118399702754,
    0.6751540363883121,    0.6751960281556778,    0.6745048676742438,
    0.6747408508827648,    0.6753230057368956,    0.6753657563643182,
    0.6754085860240151,    0.6747445514215928,    0.6749146475271858,
    0.6755368550216968,    0.6755808883868287,    0.6756237025812444,
    0.675097717589347,     0.6750290815951866,    0.6753196167115636,
    0.6757985916658744,    0.6758424455930099,    0.6758869141404472,
    0.6755140663497726,    0.675319683331405,     0.6754259449090863,
    0.6759340540746549,    0.6761092540323238,    0.6761543849686354,
    0.676199645326434,     0.6762456473737921,    0.6757182414230435,
    0.6757060542808511,    0.6758350459129264,    0.6762104418045504,
    0.6764712203080071,    0.6765171828782812,    0.6765630525674814,
    0.6766089393870338,    0.6766553216574777,    0.6763101236169518,
    0.6761906375412401,    0.6762013633298062,    0.6762755990194377,
    0.6764111706586997,    0.6766541333114608,    0.676981163685669,
    0.6770285508455751,    0.6770755492150149,    0.6771226111649449,
    0.6771698548975675,    0.6772174744902953,    0.677265049319552,
    0.6773125847609949,    0.6773603616035362,    0.6774085882960988,
    0.6774564170772951,    0.6772282796929118,    0.6771724437542583,
    0.6771683643682547,    0.6771862078156504,    0.677216314317683,
    0.6772541294309854,    0.6772971189246199,    0.6773437792756333,
    0.6773932467000157,    0.6774451283026562,    0.6774994349701308,
    0.6775565773616091,    0.6776174263503757,    0.6776834807822669,
    0.6777572755623625,    0.6778434609320211,    0.677952386655578,
    0.6781204577759335,    0.6783882778450743,    0.6784372395680421,
    0.6784869131220124,    0.6785372270615893,    0.6785875237001586,
    0.6786378467551819,    0.6786882491901634,    0.6787387838023385,
    0.6787893708469402,    0.6788399900948263,    0.6788911715123906,
    0.6787451665242695,    0.6786283852834919,    0.6786050118080275,
    0.678632114995984,     0.6787066245804971,    0.6788606388585356,
    0.6792494078466449,    0.679300801024221,     0.6793525805617942,
    0.679404428521753,     0.6794561697043099,    0.6795079751184808,
    0.6792605242402464,    0.6791905403139664,    0.679229442239392,
    0.6793881357178791,    0.6797690252414401,    0.6798216505239801,
    0.6798745245587968,    0.6799267066008949,    0.6798433475780092,
    0.6796447046376577,    0.6796648559963443,    0.6798714545936404,
    0.680191510715616,     0.6802444657878375,    0.6802978405049125,
    0.6802645138748582,    0.680020662549026,     0.6800627124155875,
    0.6805116493927051,    0.6805653051990554,    0.6806192426301165,
    0.6806731775096919,    0.6803639392543529,    0.6803974209719276,
    0.6808352878505972,    0.6808894210732526,    0.6809435629066222,
    0.6807800527059313,    0.6806605534238773,    0.6808859377054132,
    0.6811617640272695,    0.6812162911759179,    0.6811241133283832,
    0.6809432831004872,    0.6811854557327655,    0.6814360171363063,
    0.6814912581916485,    0.6812883407441169,    0.6812308832142605,
    0.6816571479789972,    0.6817127524752181,    0.6817682283910363,
    0.6814633607310838,    0.6816669128980112,    0.6819356426702746,
    0.6819915174959688,    0.6817209456544067,    0.6818140578350677,
    0.6821594060700493,    0.6822155905850698,    0.6819563018257643,
    0.6820497500028324,    0.682385020480732,     0.6824414787415113,
    0.6821632876958075,    0.6823959576935221,    0.6826116011583723,
    0.6826684036410324,    0.6823771939611896,    0.6827824705991812,
    0.6828394429126232,    0.6826348167276186,    0.6826738703980927,
    0.6830115951699258,    0.6830688010852041,    0.6827871572405201,
    0.6831838913089168,    0.6832415844762861,    0.682995840634389,
    0.6832889567906931,    0.6834158717747745,    0.6832565627352972,
    0.683263148368295,     0.683589476030607,     0.6835640656781333,
    0.683400834910419,     0.6837644155828553,    0.6838230846034163,
    0.6835681690028834,    0.6839401943090577,    0.6839990062681925,
    0.6837471897601453,    0.6841166953850741,    0.684175614925201,
    0.683936795606309,     0.68429363199629,      0.684245109453606,
    0.6841504670214315,    0.6844714363919279,    0.6843105992894625,
    0.6844630989514109,    0.6846499341322841,    0.6844225457882822,
    0.6847694646127872,    0.6848294464739789,    0.6845851550793332,
    0.6849494584323237,    0.6849191386760061,    0.684844801783135,
    0.6851296931039074,    0.6849129620217279,    0.6852503689691728,
    0.6853106258789158,    0.685089837144907,     0.685431806914462,
    0.6852543325771947,    0.6855533905933134,    0.6856141521441339,
    0.685393148852141,     0.6857359676426891,    0.6855536637235091,
    0.6858582581728333,    0.6859194585578547,    0.685728320784427,
    0.6860422132823336,    0.6858270622325051,    0.6861651361047124,
    0.6861004955171618,    0.6862884574245057,    0.6863503761749568,
    0.6861446144415848,    0.686473993793172,     0.6862669698415048,
    0.6865981816611912,    0.6864896138884091,    0.6867226499170016,
    0.6867848629028087,    0.6866435429516297,    0.6869101853923815,
    0.6867038922593423,    0.6870348605944543,    0.6868316414824794,
    0.6871602116812071,    0.6869995339503644,    0.6872860026114989,
    0.6872157889933237,    0.6874121763258472,    0.6874753538632459,
    0.6874794958808437,    0.6876020857569114,    0.6874708166934456,
    0.6877286559340743,    0.6875584689912864,    0.6878558481728922,
    0.6876694188624054,    0.687983256829543,     0.6877908844451037,
    0.6881109415762785,    0.6879174981796887,    0.688239162174632,
    0.6880464481479974,    0.6883674839543437,    0.6881763477745906,
    0.6884961481373036,    0.6883069152116565,    0.6886249652278539,
    0.688438890098021,     0.6887543073254867,    0.6885740978723588,
    0.6888840097815139,    0.6887158675899031,    0.6890137133831388,
    0.688870726712255,     0.689144532280124,     0.6890572896409998,
    0.6892745696634432,    0.6893403414283518,    0.689389301271141,
    0.689471095461609,     0.6893862806865135,    0.689602075095592,
    0.6894549133710346,    0.6897335228151051,    0.6895604349824658,
    0.6898653957613319,    0.6897006592548608,    0.6899976623742207,
    0.6899052890674321,    0.6901300856185865,    0.6901964672899672,
    0.6901168207433032,    0.690329363754353,     0.6901712812154982,
    0.6904625585361429,    0.6903023343407828,    0.6905961035097572,
    0.6905649256780523,    0.6907064559108147,    0.6907969999295331,
    0.6906590686338375,    0.69093133792423,      0.6907727012631042,
    0.6910658127530854,    0.691088921876998,     0.6911186155017724,
    0.6912684112926772,    0.6911159276504268,    0.6914036864825234,
    0.6912816900141582,    0.6915393758470975,    0.6916072103962085,
    0.6914788268491882,    0.6917433429572969,    0.6916035575908911,
    0.691879647697224,     0.6919480013556867,    0.6918291039054353,
    0.6920854347346717,    0.6919502346494352,    0.6922223136487026,
    0.6922908115589893,    0.6921594932313238,    0.6924284020361785,
    0.6923259955206369,    0.6925662913608605,    0.6926354175538859,
    0.6924893890273774,    0.6927738405797217,    0.6928430319224751,
    0.6927574198715915,    0.6929818781430145,    0.6928568443509077,
    0.6931210141286344,    0.6931907899943432,    0.6930496806657851,
    0.6933303274216254,    0.6934001962947034,    0.6932939730790607,
    0.6935402477638082,    0.6934629830880746,    0.6935903766906443,
    0.6937509750967059,    0.6936241957527752,    0.6938918190115423,
    0.6939622207275871,    0.6938260943069797,    0.6941035544468789,
    0.6941743145403961,    0.694043813979467,     0.6943160263160003,
    0.6943869372646081,    0.694268227421425,     0.6945290862827918,
    0.694600318738554,     0.6944935629824375,    0.6947430341757665,
    0.6948143701189851,    0.6947156040584557,    0.6949575006442578,
    0.6950291465663636,    0.6949319835603418,    0.6951727663942207,
    0.6952445973041446,    0.6951428033289047,    0.6953887591977871,
    0.6954608436737355,    0.6953504815277971,    0.6956051957287261,
    0.6956775428822495,    0.6955588803059402,    0.6958256028368203,
    0.69589626895386,      0.6957727336582277,    0.696040485757472,
    0.696113191892658,     0.6959984944782645,    0.6962591011917555,
    0.6963321567352843,    0.6962498781685529,    0.6963613408142046,
    0.6965517436271434,    0.6966251095830934,    0.696526510002243,
    0.6967720375303867,    0.6968456077135541,    0.6967293875585135,
    0.6969930018078322,    0.6970668317409056,    0.6969752357517542,
    0.6971105258883313,    0.6972886635814632,    0.6973627473910892,
    0.6972600002606152,    0.6975112198855025,    0.6975856375635789,
    0.6974802361773156,    0.6976859351759643,    0.697809176250667,
    0.6978557231888818,    0.6977886717883832,    0.6980333962739679,
    0.6981082903582505,    0.6980077650574488,    0.69818607321629,
    0.6983333106866576,    0.6984086061368334,    0.6983064627589434,
    0.6985591351000118,    0.6986346376663496,    0.6985635110339802,
    0.6986495224902367,    0.6988616027057921,    0.6989371419267381,
    0.6988356430573314,    0.6990446144600219,    0.6991649081865179,
    0.6992409168872643,    0.6991407959768844,    0.6993932661833367,
    0.6994695335913036,    0.6994526114458756,    0.6994604532153449,
    0.6996989002439209,    0.6997755836732825,    0.6997115990974279,
    0.6997865243655765,    0.7000058611437254,    0.7000826941657174,
    0.7000030915661138,    0.700112785419947,     0.7003139977208793,
    0.7003911906606829,    0.7003064874829195,    0.7004336496707404,
    0.7006235871949661,    0.7007010558287018,    0.7006163914681116,
    0.7007455405162033,    0.7009341423123542,    0.7010118716359245,
    0.700931630693108,     0.701048733101432,     0.7012459729191202,
    0.7013242457591565,    0.7012538514984262,    0.7013469960313595,
    0.7015592349571099,    0.7016376780128409,    0.7015888684794432,
    0.7016453272635561,    0.7018737513954213,    0.701952520866816,
    0.7019603834024586,    0.7019483671162399,    0.7021893864102123,
    0.702268608406994,     0.7023478701589423,    0.7022605868667855,
    0.7024659226963148,    0.7025862458663833,    0.7026658936640015,
    0.702588369082639,     0.7027089162793088,    0.7029045798795261,
    0.702984413489457,     0.7029497292209287,    0.7029917582780542,
    0.703224529856343,     0.7033046144244183,    0.7033849469753173,
    0.7033022764093672,    0.7034853508022975,    0.7036262367363842,
    0.70370686871992,      0.70364719045281,      0.7037305467757201,
    0.7039489884710325,    0.7040299661517456,    0.7041108712202514,
    0.7040313343059702,    0.7042314985345095,    0.7043543264184454,
    0.7044356299015487,    0.7043790585285216,    0.7044607507641021,
    0.7046800857591219,    0.7047617469027789,    0.7048435512811416,
    0.7047668284943283,    0.7049333727177725,    0.7050890744660735,
    0.705171234296192,     0.7051404208070693,    0.7051866789218117,
    0.7054178133922014,    0.7055002312791226,    0.7055826567961402,
    0.7055162364280941,    0.7056292448357189,    0.705830547644204,
    0.7059132482973011,    0.7059961391037176,    0.7059236617502226,
    0.7060992890449167,    0.7062452559425281,    0.7063285007887794,
    0.7063061737363826,    0.7063470009760161,    0.7065786035214404,
    0.7066622164634008,    0.7067456856786554,    0.7066917182636479,
    0.7067820337201884,    0.706997046092541,     0.7070812747468819,
    0.7071662225455695,    0.7070998849979895,    0.707228060928542,
    0.7074177366426627,    0.7075020849296062,    0.7075865896143714,
    0.70751952231885,      0.7076872235544455,    0.7078403470571847,
    0.7079250577717691,    0.7079273219909846,    0.7079469822948388,
    0.7081664518608107,    0.7082651106281269,    0.7083502659129574,
    0.7083188564637987,    0.7083807917834365,    0.7086063785121393,
    0.7086918844498145,    0.7087775524847951,    0.7087299968923401,
    0.7088205687204514,    0.7090349538522989,    0.7091209394752029,
    0.7092069182265299,    0.7091510964915564,    0.7092668221527275,
    0.7094656484090897,    0.7095520559579044,    0.7096384968913432,
    0.70957921468405,      0.7097212421724667,    0.7098984088534226,
    0.7099853984031097,    0.7100721638263547,    0.7100133201598986,
    0.7101878293853373,    0.7103334045062812,    0.7104206380278759,
    0.7104225270185056,    0.710453344656325,     0.7106765651575598,
    0.7107705171739835,    0.7108581841600801,    0.7108303492360014,
    0.7109000305834647,    0.7111218201971028,    0.7112098258037612,
    0.7112979105474588,    0.7112538591141201,    0.7113552437083054,
    0.7115629182861638,    0.7116513022993423,    0.7117398178497655,
    0.7116877699354456,    0.7118231904381781,    0.7120059779995427,
    0.7120949160162781,    0.7121839968054334,    0.7121312961947391,
    0.7123151041130887,    0.7124514311079678,    0.7125407456335543,
    0.7125273082233137,    0.7125858901678772,    0.7128093467300299,
    0.7128991691945006,    0.7129887686837822,    0.7129476032875934,
    0.7130561356208193,    0.7132586344127442,    0.7133488697399055,
    0.7134390458152718,    0.7133895489951805,    0.7135561465328423,
    0.7137102919581045,    0.713800831835488,     0.7137917151200756,
    0.7138509668513869,    0.7140731575049181,    0.7141640828160158,
    0.7142551750323044,    0.7142121235981866,    0.7143408423856968,
    0.71452874798681,      0.7146201336577827,    0.7146487643854821,
    0.7146681243446025,    0.7148948738054817,    0.7149866122071113,
    0.7150785511768892,    0.7150400024426647,    0.7151617111154042,
    0.7153545969623402,    0.7154467695328837,    0.7154700121748058,
    0.7154987622763807,    0.7157239302111364,    0.7158165646879792,
    0.7159092232994817,    0.7158680096666272,    0.7160152151700467,
    0.7161877133529939,    0.7162808497943323,    0.7162646936754797,
    0.7163475770172114,    0.7165606756326652,    0.7166537889897254,
    0.7167473453139398,    0.7167075287143349,    0.716934657555845,
    0.7170283202464991,    0.7171222291852073,    0.7170824957154631,
    0.7172492395295694,    0.7174043597184219,    0.7174986083480581,
    0.7174674969518455,    0.7175926001983006,    0.7177818556190734,
    0.7178764365064645,    0.717859326262048,     0.717955055146193,
    0.7181608764159151,    0.7182558631200168,    0.7182544361978742,
    0.7183276064304502,    0.718541360436347,     0.7186367705138295,
    0.71864730996736,      0.7187066004831824,    0.7189234432573687,
    0.7190190861753468,    0.7190313736756839,    0.7190906897633488,
    0.7193069246029298,    0.7194030210448794,    0.719405632149619,
    0.7194802792114713,    0.7196919746546894,    0.7197885118575288,
    0.7197762707480468,    0.7198778857351373,    0.7200785202464228,
    0.7201754378937901,    0.7201498438488224,    0.7202901226496587,
    0.7204667173448841,    0.7205639431033045,    0.7205310784013523,
    0.7207381029014223,    0.7208563183029522,    0.7209539993959012,
    0.7209248581366929,    0.7211495894979988,    0.7212475734973632,
    0.7212458399131157,    0.7213405871214607,    0.7215420013520594,
    0.7216403821059917,    0.7216104022354255,    0.7218152455905241,
    0.7219359584864385,    0.7220346691900732,    0.722013653359282,
    0.7222324739309922,    0.7223314770904485,    0.72230709821249,
    0.7224801153861504,    0.7226291495127467,    0.7227286703218734,
    0.7227087570132453,    0.7229277452893247,    0.7230274193690885,
    0.7230007726218725,    0.7232167858756265,    0.7233272345820203,
    0.7233433832625913,    0.7234267330992732,    0.7236278988390409,
    0.7237283392837373,    0.7237031610716657,    0.7239295164707815,
    0.7240302088221595,    0.7240059439090436,    0.7242309772446032,
    0.7243329876639819,    0.7243303932368841,    0.7244580935339932,
    0.724636683243268,     0.7247045012741837,    0.724732878220742,
    0.7249412275663069,    0.7250429661982063,    0.7250251031506646,
    0.725246754437499,     0.7253488059642693,    0.7253260479391241,
    0.7255531723198206,    0.7256555950041627,    0.7256316322163973,
    0.7258605451830394,    0.7259632434450924,    0.7259395324223125,
    0.7261688857056586,    0.7262718465044662,    0.7262486507001771,
    0.7264780758939121,    0.7265813781143035,    0.7265591293349684,
    0.7267882323440147,    0.7268918948426237,    0.7268724049101991,
    0.7270993991325216,    0.7272032575764252,    0.7271913784641844,
    0.7274113804738218,    0.7275156244702728,    0.727521558452028,
    0.727724351270298,     0.7277375910205289,    0.7278771953301277,
    0.7280383485528971,    0.7280230513290146,    0.7282481395599196,
    0.7283531722251814,    0.7283344121537383,    0.7285636886670466,
    0.728669052935424,     0.7286744997191447,    0.7288801230793543,
    0.728879136594722,     0.729091693439267,     0.7291975872322558,
    0.7291794994913248,    0.7294098338778259,    0.7295160417137808,
    0.7295372161493371,    0.7297289714468442,    0.7297141855605964,
    0.7299420868508696,    0.730049242425986,     0.7300505417759785,
    0.730262924139474,     0.7302543963637332,    0.7304775509393362,
    0.7305844176479251,    0.7305857986364045,    0.7307994787114849,
    0.7307885813422116,    0.7310149438971844,    0.7311227179708454,
    0.7311416054660801,    0.731338789228285,     0.7313230999977668,
    0.7315553133413136,    0.7315923307269342,    0.7317574208794684,
    0.7318809823989477,    0.7318790916535153,    0.7320986149803678,
    0.7320855725552134,    0.7323166553873586,    0.7323609882804143,
    0.7325313937780071,    0.7326446485782729,    0.73265487304004,
    0.7328638208461211,    0.7328509602196678,    0.7330835224353697,
    0.7330783476586495,    0.7333035596267569,    0.7333575594895367,
    0.7335241327440137,    0.7336345641383657,    0.7336693873778022,
    0.7338558266653753,    0.7338583596952164,    0.7340775197120949,
    0.7340676136601889,    0.7342996952506881,    0.7342880668203158,
    0.7345222661521926,    0.7345163209041046,    0.7347453548424863,
    0.7347508102457242,    0.7349688445980936,    0.734990833573885,
    0.7351928511971638,    0.7352362417496536,    0.7354172963074783,
    0.73548718092016,      0.7356422597710338,    0.7357407843955314,
    0.7358675952397832,    0.7359541545317168,    0.7360934615391898,
    0.7361511904309492,    0.7363198242740857,    0.7363535430871849,
    0.7365466074101032,    0.7365615260660611,    0.7367738398535051,
    0.7367751063459322,    0.7370015754401498,    0.7369947433155278,
    0.7372298171574058,    0.7372216548348314,    0.7374584398949966,
    0.7374585013814715,    0.7376875876478521,    0.7377119249721636,
    0.7379172630125155,    0.7380068836007515,    0.7381473962004524,
    0.7382625774109076,    0.738267854985183,     0.738493409709457,
    0.7384865446892693,    0.7387247506648443,    0.7387394123745598,
    0.7389565668630722,    0.7390711154712567,    0.7391098423489484,
    0.7393051670177944,    0.7392990472915402,    0.7395382021408184,
    0.7395571527077959,    0.7397717228121563,    0.7398887516501065,
    0.7398945472300911,    0.7401229861646741,    0.7401262828754335,
    0.7403576785828354,    0.7404752270382372,    0.7404870776401297,
    0.7407106647529187,    0.7407165961431998,    0.740946661035242,
    0.74106484806322,      0.741064887010095,     0.7413015546273929,
    0.7413345433799031,    0.7415387668875351,    0.7416576348497724,
    0.7416570256510536,    0.7418955830549963,    0.7420147596288662,
    0.7420127729882023,    0.7422534831631606,    0.7423369109400603,
    0.7423850146444904,    0.7426125290953467,    0.742654921727969,
    0.7427660612208004,    0.7429727357248528,    0.7430020165465901,
    0.7431427246246501,    0.743334087288995,     0.7433635087896544,
    0.7434960359690813,    0.7436966034306,       0.7437393747147548,
    0.7438374430286087,    0.7440603603192285,    0.7441444724962103,
    0.7441846608954891,    0.7444251372061187,    0.7445469470599871,
    0.7445461910068244,    0.7447911072765349,    0.7449133871021997,
    0.744934620142992,     0.7450663968636168,    0.745280953179956,
    0.7454037004477317,    0.7454029989343154,    0.7456496965272419,
    0.7457728434532327,    0.7458156395851203,    0.7459024047966886,
    0.7461432049032666,    0.7462669136352028,    0.74628980582744,
    0.7464056786864772,    0.7466388730951944,    0.7467631109600317,
    0.7467882124344387,    0.7468975518147114,    0.7471368000227616,
    0.7472614497110797,    0.7473150143345071,    0.7473874144989326,
    0.7476366157523275,    0.7477619547190438,    0.7478874021132573,
    0.7478997269869636,    0.748028253877929,     0.7482645708515719,
    0.7483906243099734,    0.7485167024480119,    0.7485254718718891,
    0.7486595757648078,    0.7488959787844375,    0.749022651261704,
    0.7491495217660963,    0.7491755226345936,    0.7492791236222177,
    0.7495308614138656,    0.7496582043798964,    0.7497856979201801,
    0.7499133680146051,    0.7499373564189448,    0.7500437007828067,
    0.750216669237747,     0.7504254132563207,    0.750553795422353,
    0.7506822914053517,    0.7507860258518381,    0.750831075102953,
    0.7509425591660538,    0.7510933848752885,    0.7513268796154502,
    0.751456243694754,     0.7515857504234689,    0.7517153614587357,
    0.7518450992628026,    0.7518883763681276,    0.7519860344006649,
    0.7521086835899146,    0.7522519728798799,    0.7524962209437155,
    0.7526269070567545,    0.7527576510665231,    0.7528885707563197,
    0.7530196437436435,    0.7531507519742529,    0.7532821346713829,
    0.7534129522484933,    0.7534789479460982,    0.7535797529878008,
    0.7536949019983135,    0.7538178609097006,    0.7539459693644818,
    0.7540779090897496,    0.7542129488692618,    0.7543506712639624,
    0.7544908677809165,    0.7546335175031195,    0.7547788512133948,
    0.7549276451551357,    0.7550829734597715,    0.7552700350876749,
    0.7554037844555814,    0.7555376295096845,    0.7556716330441486,
    0.7557565608631509,    0.7558665120303724,    0.7559844550126916,
    0.756106141848349,     0.7562306314663774,    0.7563576416870468,
    0.756487172390991,     0.756619423933429,     0.7567548146345746,
    0.7568940883534927,    0.7570386021398462,    0.7571911381067002,
    0.7573587088478173,    0.7575636526929272,    0.7576998882643483,
    0.7578363416155498,    0.7579729567767545,    0.7581096964088523,
    0.7582466125538343,    0.7583836893635717,    0.7584299736066332,
    0.7585310388353699,    0.7586648632853441,    0.7588204595673985,
    0.7590175225457787,    0.7592092223021311,    0.7593473515141903,
    0.7594856536729044,    0.7596240976648501,    0.7596576984175377,
    0.7597684264650673,    0.7599242923173115,    0.7601567692446977,
    0.7603188134096126,    0.7604581572180421,    0.7605977023823998,
    0.7606155720012767,    0.7607469603689323,    0.76094999495776,
    0.7611575173280496,    0.7612978995377816,    0.7614384371591462,
    0.7614452643174127,    0.7616104283538996,    0.761860962462633,
    0.7620021132867775,    0.7621434599730789,    0.7621493193682195,
    0.7623336247984643,    0.7625684252943832,    0.7627104043283812,
    0.7627334734974873,    0.762870754160485,     0.7631374877259172,
    0.7632800444355663,    0.7633151536644788,    0.7634390627601217,
    0.7637087730953707,    0.7638520370496036,    0.7638679618742766,
    0.7640328107995673,    0.7642829107652088,    0.7644268861099219,
    0.7644327351022253,    0.7647152648845627,    0.7648597478854838,
    0.764870328257258,     0.7650746931253684,    0.7652941221640587,
    0.76532091166649,      0.7654822202430502,    0.7657299878957132,
    0.7657634447870012,    0.765918863313773,     0.7661673549988363,
    0.7661871484123836,    0.7663857853645605,    0.7666063384059331,
    0.7666117965991847,    0.7668997708328492,    0.7670467739886963,
    0.7670572312504871,    0.7673412902430647,    0.7673706116894911,
    0.7675736413397763,    0.7677843620324318,    0.7677909266869433,
    0.76808059207451,      0.7680985429317146,    0.7683775024179672,
    0.7685262463850434,    0.7685559634352986,    0.7688242628280044,
    0.7688285337610437,    0.7691230639446004,    0.7691280434500114,
    0.769422428788586,     0.7694458106712475,    0.7697224163227236,
    0.7698079909805299,    0.7700004222938821,    0.770173879190852,
    0.7702692804124733,    0.77047574987927,      0.7705686262856106,
    0.7707783519458092,    0.7708964930730268,    0.7710816834849978,
    0.7712335940060677,    0.7712593416023729,    0.771538060206639,
    0.7715417956058674,    0.7718431371975,       0.771843020130173,
    0.7721489589130404,    0.7721696681686043,    0.7724555681797368,
    0.7725857944762625,    0.7726247039628873,    0.772916802052491,
    0.7729167092683852,    0.7732252243698413,    0.7733017723787402,
    0.7733987922683327,    0.7736892283869257,    0.7736940535809336,
    0.7739995208590709,    0.7741549257418703,    0.7741498154799982,
    0.7744663469762466,    0.7745835839340476,    0.7746188238973258,
    0.7749348494886408,    0.7750310275492369,    0.7750864076524312,
    0.7754050478401722,    0.7755621353184811,    0.7755537328405536,
    0.7758769519380007,    0.7760347417027423,    0.7760378490898535,
    0.7762215576019502,    0.7765088245507075,    0.7766125464196334,
    0.776655952407173,     0.7769847713468443,    0.7771438011944912,
    0.7772147127896963,    0.7772894910247407,    0.7776220879244359,
    0.7777818762153017,    0.7779418659129422,    0.7779382640194816,
    0.7780933473340629,    0.7784230989995312,    0.7785838686413221,
    0.7787326344265493,    0.7787413544771384,    0.7788869972439639,
    0.7792289852348673,    0.7793907214715912,    0.7795527277657278,
    0.7796788278971368,    0.7797150172676056,    0.7798517413171222,
    0.7800250450156819,    0.7803655801345887,    0.7805287484456358,
    0.7806921439476342,    0.7808556877188314,    0.7810058528053763,
    0.7810455520305627,    0.7811678163814417,    0.7813146483501641,
    0.7814734818602377,    0.7816413193907028,    0.7818193850538855,
    0.7821716334763104,    0.7823370677903572,    0.7825026698401436,
    0.7826684960605361,    0.7828345335330628,    0.7830008148331188,
    0.783167186624386,     0.7833338555633366,    0.7835007202183576,
    0.7836677820535454,    0.7838350743000454,    0.7840025348005892,
    0.7841702175086265,    0.7843381454738076,    0.7845062520427905,
    0.7846745905811382,    0.7845727980850644,    0.7847219670659957,
    0.7848759709011741,    0.7850316842693424,    0.7851318111562479,
    0.783103762189946,     0.7811187440230389,    0.7791377158908546,
    0.7771606669993876,    0.7751875865939403,    0.7732184639596144,
    0.7712532884207057,    0.7692920493406433,    0.7673347361218752,
    0.765381338205794,     0.7634318450721589,    0.7614862462394719,
    0.7595445312643997,    0.7576066897418503,    0.7556727113046934,
    0.7537425856236614,    0.7518163024071014,    0.7498938514009275,
    0.7479752223883771,    0.7460604051898619,    0.744149389662936,
    0.7422421657018884,    0.7403387232378196,    0.7384390522383679,
    0.7365431427075768,    0.7346509846858281,    0.7327625682495056,
    0.7308778835110061,    0.7289969206184638,    0.7271196697558037,
    0.7252461211422913,    0.7233762650326535,    0.7215100917167979,
    0.7196475915196511,    0.7177887548010853,    0.7159335719557202,
    0.7140820334128618,    0.7122341296361296,    0.7103898511236927,
    0.708549188407719,     0.7067121320545051,    0.7048786726642523,
    0.7030488008708522,    0.701222507341962,     0.6993997827785562,
    0.6975806179150891,    0.6957650035190985,    0.6939529303912833,
    0.692144389365232,     0.6903393713073244,    0.6885378671166027,
    0.6867398677246417,    0.6849453640953822,    0.6831543472250434,
    0.6813668081419557,    0.6795827379064359,    0.6778021276106897,
    0.6760249683785993,    0.6742512513656767,    0.6724809677588917,
    0.6707141087765648,    0.6689506656682146,    0.6671906297144449,
    0.6654339922268191,    0.663680744547726,     0.6619308780502511,
    0.6601843841380762,    0.6584412542453258,    0.6567014798364561,
    0.6549650524061168,    0.653231963479064,     0.6515022046100003,
    0.6497757673834675,    0.6480526434137377,    0.6463328243446769,
    0.6446163018496208,    0.6429030676312792,    0.6411931134215917,
    0.6394864309816217,    0.6377830121014523,    0.6360828486000345,
    0.6343859323251078,    0.6326922551530639,    0.6310018089888314,
    0.6293145857657796,    0.6276305774455793,    0.6259497760180969,
    0.6242721735013053,    0.6225977619411217,    0.6209265334113634,
    0.6192584800135708,    0.6175935938769282,    0.6159318671581646,
    0.6142732920414178,    0.6126178607381421,    0.6109655654869831,
    0.6093163985537159,    0.6076703522310613,    0.6060274188386346,
    0.6043875907228435,    0.6027508602567426,    0.6011172198399527,
    0.5994866618985638,    0.5978591788850011,    0.5962347632779601,
    0.5946134075822601,    0.59299510432878,      0.5913798460743265,
    0.5897676254015596,    0.5881584349188647,    0.5865522672602603,
    0.5849491150853134,    0.5833489710790158,    0.5817518279516966,
    0.5801576784389337,    0.5785665153014149,    0.5769783313249003,
    0.5753931193200779,    0.5738108721224752,    0.5722315825923806,
    0.5706552436147233,    0.5690818480990005,    0.5675113889791614,
    0.5659438592135231,    0.5643792517846817,    0.5628175596994028,
    0.5612587759885391,    0.5597028937069364,    0.5581499059333385,
    0.5565998057702949,    0.5550525863440692,    0.553508240804551,
    0.5519667623251568,    0.5504281441027539,    0.5488923793575573,
    0.5473594613330416,    0.545829383295859,     0.5443021385357436,
    0.5427777203654263,    0.5412561221205485,    0.53973733715957,
    0.538221358863681,     0.5367081806367285,    0.5351977959051116,
    0.5336901981177086,    0.532185380745783,     0.5306833372829094,
    0.5291840612448747,    0.5276875461696107,    0.5261937856170886,
    0.5247027731692585,    0.5232145024299487,    0.5217289670247957,
    0.5202461606011513,    0.51876607682801,      0.5172887093959172,
    0.5158140520169013,    0.5143420984243802,    0.5128728423730868,
    0.5114062776389926,    0.5099423980192181,    0.5084811973319641,
    0.5070226694164257,    0.5055668081327186,    0.5041136073617968,
    0.5026630610053742,    0.5012151629858562,    0.4997699072462499,
    0.49832728775009527,   0.4968872984813916,    0.4954499334445086,
    0.4940151866641279,    0.4925830521851518,    0.4911535240726423,
    0.4897265964117324,    0.48830226330756776,   0.4868805188852165,
    0.4854613572896096,    0.4840447726854582,    0.48263075925718346,
    0.48121931120884903,   0.4798104227640783,    0.47840408816599655,
    0.4770003016771453,    0.4755990575794211,    0.4742003501739988,
    0.4728041737812652,    0.4714105227407457,    0.4700193914110374,
    0.4686307741697353,    0.46724466541336784,   0.4658610595573222,
    0.4644799510357861,    0.46310133430166545,   0.46172520382652793,
    0.4603515541005282,    0.4589803796323453,    0.45761167494911464,
    0.45624543459635925,   0.45488165313792295,   0.4535203251559047,
    0.4521614452505976,    0.4508050080404189,    0.44945100816184186,
    0.4480994402693414,    0.4467502990353143,    0.44540357915002626,
    0.44405927532155043,   0.4427173822756903,    0.44137789475592565,
    0.440040807523352,     0.4387061153566081,    0.4373738130518226,
    0.43604389542254707,   0.43471635729968977,   0.4333911935314689,
    0.4320683989833356,    0.4307479685379172,    0.42942989709495766,
    0.42811417957126374,   0.4268008109006292,    0.42548978603379084,
    0.42418109993835446,   0.42287474759874755,   0.42157072401615386,
    0.4202690242084532,    0.41896964321016844,   0.4176725760723989,
    0.4163778178627707,    0.4150853636653769,    0.41379520858071217,
    0.41250734772562647,   0.4112217762332583,    0.4099384892529902,
    0.4086574819503726,    0.40737874950709213,   0.40610228712089175,
    0.4048280900055319,    0.4035561533907299,    0.4022864725220976,
    0.4010190426610997,    0.3997538590849851,    0.39849091708674345,
    0.39723021197504554,   0.3959717390741844,    0.3947154937240356,
    0.39346147127999165,   0.39220966711290794,   0.3909600766090599,
    0.3897126951700806,    0.3884675182129127,    0.38722454116975413,
    0.3859837594880072,    0.38474516863022573,   0.3835087640740682,
    0.38227454131223326,   0.3810424958524248,    0.37981262321729,
    0.3785849189443739,    0.37735937858606583,   0.37613599770955025,
    0.37491477189675887,   0.373695696744314,     0.3724787678634869,
    0.3712639808801458,    0.3700513314347055,    0.36884081518207423,
    0.367632427791619,     0.36642616494709923,   0.3652220223466303,
    0.36401999570263477,   0.3628200807417865,    0.36162227320497237,
    0.3604265688472389,    0.35923296343774874,   0.35804145275972865,
    0.35685203261043175,   0.35566469880107915,   0.35447944715682583,
    0.35329627351670095,   0.35211517373357526,   0.3509361436741085,
    0.34975917921869926,   0.3485842762614549,    0.347411430710125,
    0.3462406384860794,    0.345071895524241,     0.34390519777306305,
    0.34274054119446684,   0.341577921763808,     0.34041733546982517,
    0.33925877831460827,   0.33810224631353947,   0.3369477354952633,
    0.3357952419016301,    0.3346447615876697,    0.3334962906215368,
    0.3323498250844653,    0.3312053610707402,    0.33006289468764205,
    0.3289224220554112,    0.32778393930720673,   0.3266474425890602,
    0.32551292805983556,   0.3243803918911933,    0.32324983026754167,
    0.32212123938600234,   0.3209946154563661,    0.31986995470104995,
    0.31874725335506326,   0.31762650766596134,   0.3165077138938119,
    0.3153908683111476,    0.31427596720293227,   0.3131630068665202,
    0.31205198361161607,   0.3109428937602324,    0.30983573364665956,
    0.3087304996174211,    0.3076271880312304,    0.3065257952589656,
    0.30542631768361467,   0.3043287517002546,    0.3032330937159998,
    0.3021393401499703,    0.3010474874332556,    0.2999575320088725,
    0.29886947033173294,   0.2977832988686027,    0.2966990140980684,
    0.2956166125104963,    0.29453609060799996,   0.29345744490440107,
    0.292380671925196,     0.2913057682075194,    0.2902327303000977,
    0.28916155476323663,   0.2880922381687598,    0.2870247770999926,
    0.2859591681517145,    0.2848954079301323,    0.2838334930528377,
    0.2827734201487806,    0.28171518585823,      0.2806587868327353,
    0.2796042197351035,    0.2785514812393518,    0.27750056803068396,
    0.2764514768054517,    0.2754042042711207,    0.27435874714623826,
    0.2733151021603991,    0.2722732660542151,    0.2712332355792732,
    0.2701950074981196,    0.26915857858420617,   0.2681239456218726,
    0.2670911054063077,    0.26606005474351974,   0.26503079045030103,
    0.2640033093542022,    0.26297760829349137,   0.2619536841171262,
    0.26093153368472655,   0.2599111538665353,    0.2588925415433959,
    0.2578756936067106,    0.25686060695841656,   0.2558472785109589,
    0.25483570518724386,   0.25382588392062827,   0.2528178116548718,
    0.25181148534411935,   0.2508069019528611,    0.24980405845591105,
    0.24880295183836973,   0.24780357909559825,   0.24680593723318878,
    0.2458100232669288,    0.244815834222783,     0.24382336713685446,
    0.24283261905536094,   0.24184358703459954,   0.24085626814092648,
    0.23987065945071886,   0.23888675805035392,   0.23790456103617785,
    0.23692406551447268,   0.2359452686014379,    0.23496816742315219,
    0.2339927591155521,    0.23301904082440095,   0.23204700970526157,
    0.23107666292347107,   0.23010799765410914,   0.22914101108197482,
    0.22817570040155527,   0.22721206281700193,   0.2262500955421033,
    0.22528979580025302,   0.22433116082443316,   0.22337418785717464,
    0.22241887415054448,   0.22146521696610663,   0.22051321357490428,
    0.21956286125743021,   0.21861415730360406,   0.21766709901273948,
    0.21672168369352557,   0.21577790866399743,   0.21483577125151254,
    0.21389526879272144,   0.21295639863354962,   0.21201915812916344,
    0.21108354464395188,   0.210149555551499,     0.20921718823455823,
    0.2082864400850304,    0.20735730850393408,   0.20642979090138763,
    0.20550388469657957,   0.20457958731774845,   0.2036568962021517,
    0.2027358087960508,    0.20181632255468018,   0.20089843494222803,
    0.19998214343180584,   0.19906744550543604,   0.19815433865401635,
    0.1972428203773027,    0.19633288818388875,   0.19542453959117292,
    0.194517772125346,     0.19361258332136308,   0.19270897072291857,
    0.19180693188242814,   0.19090646436100278,   0.19000756572842792,
    0.18911023356314,      0.18821446545220546,   0.1873202589912953,
    0.18642761178466857,   0.18553652144514302,   0.18464698559408155,
    0.18375900186136038,   0.18287256788535994,   0.18198768131292908,
    0.1811043397993754,    0.18022254100843912,   0.1793422826122674,
    0.1784635622914025,    0.1775863777347549,    0.17671072663957807,
    0.17583660671146,      0.1749640156642885,    0.17409295122024065,
    0.17322341110975792,   0.17235539307152464,   0.17148889485245078,
    0.17062391420764914,   0.1697604489004165,    0.16889849670221221,
    0.16803805539263936,   0.16717912275942415,   0.1663216965983971,
    0.16546577471347151,   0.16461135491662626,   0.16375843502788232,
    0.16290701287528633,   0.16205708629489451,   0.16120865313074412,
    0.16036171123484286,   0.1595162584671462,    0.1586722926955401,
    0.15782981179581654,   0.15698881365166517,   0.15614929615464215,
    0.15531125720416397,   0.15447469470747646,   0.1536396065796488,
    0.15280599074354395,   0.1519738451298116,    0.15114316767685754,
    0.15031395633083425,   0.1494862090456205,    0.14865992378280607,
    0.14783509851166968,   0.14701173120915964,   0.1461898198598861,
    0.1453693624560924,    0.14455035699764385,   0.1437328014920077,
    0.14291669395423798,   0.14210203240695607,   0.14128881488033684,
    0.14047703941208678,   0.13966670404743345,   0.13885780683910015,
    0.1380503458472986,    0.13724431913970492,   0.13643972479144623,
    0.13563656088508405,   0.13483482551059853,   0.1340345167653682,
    0.13323563275415934,   0.1324381715891071,    0.13164213138969671,
    0.13084751028275254,   0.13005430640241844,   0.12926251789014317,
    0.1284721428946668,    0.12768317957200123,   0.12689562608541458,
    0.1261094806054219,    0.12532474130975965,   0.12454140638337871,
    0.12375947401842834,   0.1229789424142348,    0.12219980977729335,
    0.12142207432124931,   0.12064573426688256,   0.11987078784209669,
    0.11909723328190013,   0.11832506882839142,   0.11755429273075063,
    0.11678490324521486,   0.11601689863507327,   0.11525027717064625,
    0.11448503712927359,   0.11372117679530007,   0.11295869446006374,
    0.11219758842187472,   0.11143785698600944,   0.11067949846469116,
    0.10992251117707923,   0.109166893449254,     0.10841264361420007,
    0.10765976001180057,   0.10690824098881489,   0.10615808489887146,
    0.10540929010245002,   0.10466185496687208,   0.10391577786628349,
    0.1031710571816454,    0.10242769130071872,   0.10168567861805088,
    0.10094501753496489,   0.10020570645954403,   0.09946774380661973,
    0.09873112799776144,   0.0979958574612586,    0.0972619306321152,
    0.09652934595202872,   0.09579810186938388,   0.09506819683924093,
    0.09433962932331685,   0.09361239778998097,   0.09288650071423574,
    0.0921619365777095,    0.0914387038686444,    0.09071680108188022,
    0.08999622671884572,   0.08927697928754634,   0.08855905730255333,
    0.08784245928499093,   0.08712718376252439,   0.08641322926934708,
    0.08570059434617527,   0.08498927754022854,   0.08427927740522345,
    0.08357059250136208,   0.08286322139531926,   0.0821571626602295,
    0.08145241487568362,   0.08074897662770801,   0.08004684650876122,
    0.07934602311771785,   0.07864650505986147,   0.07794829094687336,
    0.07725137939681885,   0.07655576903414,      0.0758614584896449,
    0.07516844640049561,   0.07447673141019731,   0.07378631216859195,
    0.07309718733184412,   0.07240935556242703,   0.07172281552912677,
    0.071037565907016,     0.07035360537745161,   0.06967093262806638,
    0.06898954635275352,   0.06830944525166467,   0.06763062803119115,
    0.06695309340396087,   0.06627684008882595,   0.06560186681085406,
    0.06492817230132,      0.064255755297693,     0.06358461454362985,
    0.06291474878896675,   0.062246156789708455,  0.061578837308016776,
    0.06091278911220722,   0.06024801097673464,   0.05958450168218634,
    0.05892226001527495,   0.05826128476882678,   0.05760157474177312,
    0.05694312873914524,   0.05628594557206255,   0.05563002405772101,
    0.05497536301939317,   0.05432196128641093,   0.05366981769416396,
    0.05301893108408777,   0.05236930030365303,   0.051720924206364705,
    0.05107380165174807,   0.05042793150533945,   0.049783312638687044,
    0.049139943929332325,  0.04849782426080721,   0.04785695252262589,
    0.047217327610278026,  0.04657894842521983,   0.0459418138748654,
    0.045305922872581166,  0.044671274337676994,  0.04403786719540115,
    0.04340570037692768,   0.04277477281935477,   0.042145083465694365,
    0.04151663126486496,   0.04088941517168871,   0.04026343414687333,
    0.039638687157021214,  0.039015173174606496,  0.03839289117797898,
    0.03777184015135585,   0.03715201908480684,   0.03653342697425673,
    0.035916062821476566,  0.03529992563407158,   0.034685014425485196,
    0.03407132821497799,   0.03345886602763578,   0.03284762689435441,
    0.03223760985183606,   0.031628813942581706,  0.03102123821488902,
    0.030414881722838977,  0.02980974352629854,   0.029205822690906828,
    0.028603118288071376,  0.028001629394966424,  0.027401355094522045,
    0.026802294475421738,  0.026204446632092496,  0.025607810664703377,
    0.02501238567915639,   0.024418170787086736,  0.02382516510584905,
    0.02323336775851803,   0.02264277787388112,   0.02205339458643415,
    0.02146521703637245,   0.020878244369591153,  0.020292475737676348,
    0.019707910297896515,  0.019124547213212228,  0.01854238565224906,
    0.01796142478931319,   0.017381663804371218,  0.016803101883055154,
    0.016225738216656994,  0.015649572002111846,  0.015074602442012405,
    0.014500828744590447,  0.013928250123717742,  0.01335686579889701,
    0.012786674995265814,  0.012217676943583224,  0.011649870880232824,
    0.01108325604721248,   0.010517831692129888,  0.00995359706821065,
    0.009390551434273045,  0.008828694054744495,  0.008268024199647018,
    0.0077085411445945735, 0.00715024417078403,   0.0065931325650085615,
    0.006037205619634081,  0.005482462632602904,  0.0049289029074386604,
    0.004376525753226176,  0.0038253304846271757, 0.003275316421854321,
    0.0027264828906907175, 0.0021788292224689497, 0.0016323547540777847,
    0.0010870588279584758, 0.0005429407920885792,
  ];

  constructor(nCascade) {
    this.ap_i1 = new Array(nCascade).fill(0);
    this.ap_i2 = new Array(nCascade).fill(0);
    this.lp_i1 = new Array(nCascade).fill(0);
    this.lp_i2 = new Array(nCascade).fill(0);
    this.lp_out = new Array(nCascade).fill(0);
  }

  reset() {
    this.ap_i1.fill(0);
    this.ap_i2.fill(0);
    this.lp_i1.fill(0);
    this.lp_i2.fill(0);
    this.lp_out.fill(0);
  }

  // `normalizedFreq` must be in [0, 0.5].
  #getMaxQ(normalizedFreq) {
    const pos = (2 * this.#qTable.length - 1) * normalizedFreq;
    const idx = Math.floor(pos);
    return this.#qTable[idx] + (pos - idx) * (this.#qTable[idx + 1] - this.#qTable[idx]);
  }

  process(input, cutoffNormalized, resonance, apScale) {
    // Set cutoff.
    const freq = clamp(cutoffNormalized, 0, 0.45);
    const ap_g = Math.tan(Math.PI * freq * apScale);
    const lp_g = Math.tan(Math.PI * freq);
    const reso = resonance * this.#getMaxQ(freq);

    for (let idx = 0; idx < this.ap_i1.length; ++idx) {
      const ap_v1 = (this.ap_i1[idx] + ap_g * (this.lp_out[idx] - this.ap_i2[idx]))
        / (1 + ap_g * (ap_g + Math.SQRT1_2));
      const ap_v2 = this.ap_i2[idx] + ap_g * ap_v1;
      this.ap_i2[idx] = 2 * ap_v2 - this.ap_i2[idx];
      this.ap_i1[idx] = 2 * ap_v1 - this.ap_i1[idx];
      const ap_out = this.lp_out[idx] - 2 * Math.SQRT1_2 * ap_v1;

      const lp_v0 = input - reso * ap_out;
      const lp_v1 = (this.lp_i1[idx] + lp_g * (lp_v0 - this.lp_i2[idx]))
        / (1 + lp_g * (lp_g + Math.SQRT1_2));
      const lp_v2 = this.lp_i2[idx] + lp_g * lp_v1;
      this.lp_i2[idx] = 2 * lp_v2 - this.lp_i2[idx];
      this.lp_i1[idx] = 2 * lp_v1 - this.lp_i1[idx];
      input = this.lp_out[idx] = lp_v2;
    }
    return input;
  }
}

/**
A cascade of BLT one-pole lowpass with a single feedback.

```
input -+--> (tanh) -> (LP1) -> ... -> (LP1) --+-> output
       â†‘                                      |
       +--------------------------- (gain) <--+
```
*/
export class CascadedLowpass1 {
  constructor(nCascade) {
    this.x1 = new Array(nCascade).fill(0);
    this.y1 = new Array(nCascade).fill(0);
  }

  reset() {
    this.x1.fill(0);
    this.y1.fill(0);
  }

  // `resonance` can be negative or greater than 1. However, higher value cause
  // oscillation.
  process(input, cutoffNormalized, resonance) {
    const cutoffBounded = clamp(cutoffNormalized, 0.0001, 0.4999);
    const k = 1 / Math.tan(Math.PI * cutoffBounded);
    const a0 = 1 + k;
    const bn = 1 / a0;
    const a1 = (k - 1) / a0; // Negated.

    const tuningGain = Math.PI * Math.cos(Math.PI * cutoffBounded);
    input = Math.tanh(0.5 * input - tuningGain * resonance * this.y1.at(-1));

    for (let idx = 0; idx < this.x1.length; ++idx) {
      this.y1[idx] = bn * (input + this.x1[idx]) + a1 * this.y1[idx];
      this.x1[idx] = input;
      input = this.y1[idx];
    }

    return 2 * input;
  }
}

/**
`SpringDamperResonantoLowpass3*` is based on a simple mass-spring-damper system. This
filter has 3-poles, but the slope is -6 dB/oct which is the same as 1-pole.

Naive form of this filter may add direct current (DC) to the output, probably because it
has zero and pole at frequency 0. Additional highpass is used to remove the DC, and
separete lowpass out is mixed to bring back the reduced low.

```
input -+-> (LP3) -> (HP) -+-> output
       |                  â†‘
       +-> (EMA lowpass) -+
```

Variation A may be unstable.

Variation C and D changes the sound depending on sampling rate.

Reference:
https://ryukau.github.io/filter_notes/3pole_lowpass/3pole_lowpass.html
*/
export class SpringDamperLowpass3 {
  constructor(nCascade, sampleRate, variation = 0) {
    this.cutoffH = this.getEmaCutoff(10 / sampleRate);

    this.acc = new Array(nCascade).fill(0);
    this.vel = new Array(nCascade).fill(0);
    this.pos = new Array(nCascade).fill(0);
    this.x1L = new Array(nCascade).fill(0);

    this.v1H = new Array(nCascade).fill(0);
    this.y1Sub = new Array(nCascade).fill(0);

    this.processFunc = variation == 0 ? this.processA
      : variation == 1                ? this.processB
      : variation == 2                ? this.processC
                                      : this.processD;
  }

  reset() {
    this.acc.fill(0);
    this.vel.fill(0);
    this.pos.fill(0);
    this.x1L.fill(0);

    this.v1H.fill(0);
    this.y1Sub.fill(0);
  }

  getEmaCutoff(cutoffNormalized) {
    const t = 1 - Math.cos(2 * Math.PI * cutoffNormalized);
    return Math.sqrt(t * t + 2 * t) - t;
  }

  process(input, cutoffNormalized, resonance) {
    return this.processFunc(input, cutoffNormalized, resonance);
  }

  processA(input, cutoffNormalized, resonance) {
    const cutoff = this.getEmaCutoff(clamp(cutoffNormalized, 0, 0.4999));
    resonance = Math.min(resonance, 1 - Number.EPSILON);

    for (let idx = 0; idx < this.acc.length; ++idx) {
      // Lowpass3.
      this.acc[idx] = resonance * this.acc[idx] + cutoff * this.vel[idx];
      this.vel[idx] -= this.acc[idx] + input - this.x1L[idx];
      this.x1L[idx] = input;
      this.pos[idx] += cutoff * this.vel[idx];

      // EMA highpass.
      this.v1H[idx] = this.cutoffH * (this.pos[idx] - this.v1H[idx]);
      this.pos[idx] -= this.v1H[idx];

      // EMA Lowpass.
      this.y1Sub[idx] = cutoff * (input - this.y1Sub[idx]);
      input = this.pos[idx] - this.y1Sub[idx];
    }
    return input;
  }

  processB(input, cutoffNormalized, resonance) {
    const cutoff = this.getEmaCutoff(clamp(cutoffNormalized, 0, 0.4999));

    for (let idx = 0; idx < this.acc.length; ++idx) {
      this.acc[idx] = resonance * this.acc[idx] + cutoff * this.vel[idx];
      this.vel[idx] -= this.acc[idx] + input - this.x1L[idx];
      this.x1L[idx] = input;
      this.pos[idx] += cutoff * this.vel[idx];

      this.v1H[idx] = this.cutoffH * (this.pos[idx] - this.v1H[idx]);
      this.pos[idx] -= this.v1H[idx];

      input = this.pos[idx] - input;
    }
    return input;
  }

  processC(input, cutoffNormalized, resonance) {
    const cutoff = this.getEmaCutoff(clamp(cutoffNormalized, 0, 0.4999));

    for (let idx = 0; idx < this.acc.length; ++idx) {
      this.acc[idx] = resonance * this.acc[idx] + cutoff * this.vel[idx];
      this.vel[idx] -= this.acc[idx] + input - this.x1L[idx];
      this.x1L[idx] = input;
      this.pos[idx] += cutoff * this.vel[idx];

      // 2-sample FIR highpass.
      this.pos[idx] -= this.v1H[idx];
      this.v1H[idx] = this.pos[idx];

      this.y1Sub[idx] = cutoff * (input - this.y1Sub[idx]);
      input = this.pos[idx] + this.y1Sub[idx];
    }
    return input;
  }

  processD(input, cutoffNormalized, resonance) {
    const cutoff = this.getEmaCutoff(clamp(cutoffNormalized, 0, 0.4999));

    for (let idx = 0; idx < this.acc.length; ++idx) {
      this.acc[idx] = resonance * this.acc[idx] + cutoff * this.vel[idx];
      this.vel[idx] -= this.acc[idx] + input - this.x1L[idx];
      this.x1L[idx] = input;
      this.pos[idx] += this.vel[idx];

      this.pos[idx] -= this.v1H[idx];
      this.v1H[idx] = this.pos[idx];

      input = this.pos[idx] + input;
    }
    return input;
  }
}

/**
`DoubleSpringFilter4` is a 4-pole multi-mode filter based on double spring.

Reference: https://ryukau.github.io/filter_notes/doublefilter/doublefilter.html
*/
export class DoubleSpringFilter4 {
  constructor(nCascade, sampleRate, variation = 0) {
    const getEmaCutoff = (cutoffNormalized) => {
      const t = 1 - Math.cos(2 * Math.PI * cutoffNormalized);
      return Math.sqrt(t * t + 2 * t) - t;
    };
    this.cutoffH = getEmaCutoff(10 / sampleRate);

    this.acc2 = new Array(nCascade).fill(0);
    this.vel2 = new Array(nCascade).fill(0);
    this.pos2 = new Array(nCascade).fill(0);

    this.acc1 = new Array(nCascade).fill(0);
    this.vel1 = new Array(nCascade).fill(0);
    this.pos1 = new Array(nCascade).fill(0);

    this.x1 = new Array(nCascade).fill(0);

    this.v1H = new Array(nCascade).fill(0);

    this.processFunc = variation == 0 ? this.#processA : this.#processB;
  }

  reset() {
    this.acc2.fill(0);
    this.vel2.fill(0);
    this.pos2.fill(0);

    this.acc1.fill(0);
    this.vel1.fill(0);
    this.pos1.fill(0);

    this.x1.fill(0);

    this.v1H.fill(0);
  }

  #approximateK2(x) { return x * (6.5451144600705975 + x * 20.46391326872472); }

  #approximateK1(x) {
    const C0 = -0.0049691265927442885;
    const C1 = -471.738128187657;
    const C2 = 1432.5662635997667;
    const C3 = 345.2853784111966;
    const C4 = -4454.40786711102;
    const C5 = 3468.062963176107;
    return C0 + 1 / (C1 + x * (C2 + x * (C3 + x * (C4 + x * C5))));
  }

  process(input, cutoffNormalized, resonance) {
    // Some magic derived from numerical tuning.
    const k2 = this.#approximateK2(clamp(cutoffNormalized, 0, 0.1));
    let k1 = k2 < 0.6295160864148501 ? resonance * Math.PI
                                     : resonance * this.#approximateK1(k2);
    const A = 0.69;
    const B2 = 0.63;
    const B3 = 0.635;
    if (k2 < B2)
      k1 *= A;
    else if (k2 >= B2 && k2 < B3)
      k1 *= A + (1 - A) * (k2 - B2) / (B3 - B2);

    // Filter processing.
    return this.processFunc(input, k1, k2);
  }

  #processA(input, k1, k2) {
    for (let idx = 0; idx < this.acc2.length; ++idx) {
      this.acc2[idx] = k2 * (this.vel1[idx] - this.vel2[idx]);
      this.vel2[idx] += this.acc2[idx] + input - this.x1[idx];
      this.pos2[idx] += this.vel2[idx] * k2;

      this.acc1[idx] = -k1 * this.pos1[idx] - this.acc2[idx];
      this.vel1[idx] += this.acc1[idx];
      this.pos1[idx] += this.vel1[idx];

      this.x1[idx] = input;

      // EMA highpass.
      this.v1H[idx] = this.cutoffH * (this.pos2[idx] - this.v1H[idx]);
      input = this.pos2[idx] -= this.v1H[idx];
    }
    return input;
  }

  #processB(input, k1, k2) {
    for (let idx = 0; idx < this.acc2.length; ++idx) {
      this.acc2[idx] = k2 * (this.vel1[idx] - this.vel2[idx]);
      this.vel2[idx] += this.acc2[idx] + input - this.x1[idx];
      this.pos2[idx] += this.vel2[idx] * k2;

      this.acc1[idx] = -k1 * this.pos1[idx] - this.acc2[idx];
      this.vel1[idx] += this.acc1[idx];
      this.pos1[idx] += this.vel1[idx];

      this.x1[idx] = input;

      // EMA highpass.
      this.v1H[idx] = this.cutoffH * (this.pos1[idx] - this.v1H[idx]);
      input = this.pos1[idx] -= this.v1H[idx];
    }
    return input;
  }
}
