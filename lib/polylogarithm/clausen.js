// SPDX-License-Identifier: MIT
// Ported from: https://github.com/Expander/polylogarithm

// Clausen function of order 1.
export function Cl1(x) {
  if (x < 0) x = -x;
  if (x >= 2 * Math.PI) x = x % 2 * Math.PI;
  if (x > Math.PI) {
    const p0 = 6.28125;
    const p1 = 0.0019353071795864769253;
    x = (p0 - x) + p1;
  }
  if (x == 0) return Number.POSITIVE_INFINITY;
  return -Math.log(2.0 * Math.sin(0.5 * x));
}

// Clausen function of order 2.
export function Cl2(x) {
  const PI = 3.14159265358979324;
  const PI2 = 2 * PI, PIH = PI / 2, PI28 = PI * PI / 8;
  let sgn = 1;

  if (x < 0) {
    x = -x;
    sgn = -1;
  }
  if (x >= PI2) x = x % PI2;
  if (x > PI) {
    const p0 = 6.28125;
    const p1 = 0.0019353071795864769253;
    x = (p0 - x) + p1;
    sgn = -sgn;
  }
  if (x == 0) return x;
  if (x == PI) return 0;

  let h = 0;

  if (x < PIH) {
    const P = [
      1.3888888888888889e-02, -4.3286930203743071e-04, 3.2779814789973427e-06,
      -3.6001540369575084e-09
    ];
    const Q = [
      1.0000000000000000e+00, -3.6166589746694121e-02, 3.6015827281202639e-04,
      -8.3646182842184428e-07
    ];
    const y = x * x;
    const y2 = y * y;
    const p = P[0] + y * P[1] + y2 * (P[2] + y * P[3]);
    const q = Q[0] + y * Q[1] + y2 * (Q[2] + y * Q[3]);

    h = x * (1 - Math.log(x) + y * p / q);
  } else {
    const P = [
      6.4005702446195512e-01, -2.0641655351338783e-01, 2.4175305223497718e-02,
      -1.2355955287855728e-03, 2.5649833551291124e-05, -1.4783829128773320e-07
    ];
    const Q = [
      1.0000000000000000e+00, -2.5299102015666356e-01, 2.2148751048467057e-02,
      -7.8183920462457496e-04, 9.5432542196310670e-06, -1.8184302880448247e-08
    ];
    const y = PI - x;
    const z = y * y - PI28;
    const z2 = z * z;
    const z4 = z2 * z2;
    const p = P[0] + z * P[1] + z2 * (P[2] + z * P[3]) + z4 * (P[4] + z * P[5]);
    const q = Q[0] + z * Q[1] + z2 * (Q[2] + z * Q[3]) + z4 * (Q[4] + z * Q[5]);

    h = y * p / q;
  }

  return sgn * h;
}

// Clausen function of order 3.
export function Cl3(x) {
  const PI = 3.14159265358979324;
  const PI2 = 2 * PI, PIH = PI / 2, PI28 = PI * PI / 8;
  const zeta3 = 1.2020569031595943;

  if (x < 0) x = -x;
  if (x >= PI2) x = x % PI2;
  if (x > PI) {
    const p0 = 6.28125;
    const p1 = 0.0019353071795864769253;
    x = (p0 - x) + p1;
  }
  if (x == 0) return zeta3;

  let h = 0;

  if (x < PIH) {
    const P = [
      -7.5000000000000001e-01, 1.5707637881835541e-02, -3.5426736843494423e-05,
      -2.4408931585123682e-07
    ];
    const Q = [
      1.0000000000000000e+00, -2.5573146805410089e-02, 1.5019774853075050e-04,
      -1.0648552418111624e-07
    ];
    const y = x * x;
    const y2 = y * y;
    const p = P[0] + y * P[1] + y2 * (P[2] + y * P[3]);
    const q = Q[0] + y * Q[1] + y2 * (Q[2] + y * Q[3]);
    h = zeta3 + y * (p / q + 0.5 * Math.log(x));
  } else {
    const P = [
      -4.9017024647634973e-01, 4.1559155224660940e-01, -7.9425531417806701e-02,
      5.9420152260602943e-03, -1.8302227163540190e-04, 1.8027408929418533e-06
    ];
    const Q = [
      1.0000000000000000e+00, -1.9495887541644712e-01, 1.2059410236484074e-02,
      -2.5235889467301620e-04, 1.0199322763377861e-06, 1.9612106499469264e-09
    ];
    const y = PI - x;
    const z = y * y - PI28;
    const z2 = z * z;
    const z4 = z2 * z2;
    const p = P[0] + z * P[1] + z2 * (P[2] + z * P[3]) + z4 * (P[4] + z * P[5]);
    const q = Q[0] + z * Q[1] + z2 * (Q[2] + z * Q[3]) + z4 * (Q[4] + z * Q[5]);
    h = p / q;
  }

  return h;
}

// Clausen function of order 4.
export function Cl4(x) {
  const PI = 3.14159265358979324;
  const PI2 = 2 * PI, PIH = PI / 2, PI28 = PI * PI / 8;
  const zeta3 = 1.2020569031595943;
  let sgn = 1;

  if (x < 0) {
    x = -x;
    sgn = -1;
  }
  if (x >= PI2) x = x % PI2;
  if (x > PI) {
    const p0 = 6.28125;
    const p1 = 0.0019353071795864769253;
    x = (p0 - x) + p1;
    sgn = -sgn;
  }
  if (x == 0) return x;
  if (x == PI) return 0;

  let h = 0;

  if (x < PIH) {
    const P = [
      -3.0555555555555556e-01, 6.0521392328447206e-03, -1.9587493942041528e-05,
      -3.1137343767030358e-08
    ];
    const Q = [
      1.0000000000000000e+00, -2.2079728398400851e-02, 1.0887447112236682e-04,
      -6.1847621370547954e-08
    ];
    const y = x * x;
    const y2 = y * y;
    const p = P[0] + y * P[1] + y2 * (P[2] + y * P[3]);
    const q = Q[0] + y * Q[1] + y2 * (Q[2] + y * Q[3]);
    h = x * (zeta3 + y * (p / q + 1. / 6 * Math.log(x)));
  } else {
    const P = [
      7.6223911686491336e-01, -2.4339587368267260e-01, 2.8715364937979943e-02,
      -1.5368612510964667e-03, 3.6261044225761673e-05, -2.8557977333851308e-07
    ];
    const Q = [
      1.0000000000000000e+00, -1.7465715261403233e-01, 9.5439417991615653e-03,
      -1.7325070821666274e-04, 5.9283675098376635e-07, 9.4127575773361230e-10
    ];
    const y = PI - x;
    const z = y * y - PI28;
    const z2 = z * z;
    const z4 = z2 * z2;
    const p = P[0] + z * P[1] + z2 * (P[2] + z * P[3]) + z4 * (P[4] + z * P[5]);
    const q = Q[0] + z * Q[1] + z2 * (Q[2] + z * Q[3]) + z4 * (Q[4] + z * Q[5]);
    h = y * p / q;
  }

  return sgn * h;
}

// Clausen function of order 5.
export function Cl5(x) {
  const PI = 3.14159265358979324;
  const PI2 = 2 * PI, PIH = PI / 2, PI28 = PI * PI / 8;
  const zeta5 = 1.0369277551433699;

  if (x < 0) x = -x;
  if (x >= PI2) x = x % PI2;
  if (x > PI) {
    const p0 = 6.28125;
    const p1 = 0.0019353071795864769253;
    x = (p0 - x) + p1;
  }
  if (x == 0) return zeta5;

  let h = 0;

  if (x < PIH) {
    const P = [
      1.0369277551433699e+00, -6.1354800479984468e-01, 9.4076401395712763e-02,
      -9.4056155866704436e-04
    ];
    const Q = [
      1.0000000000000000e+00, -1.2073698633244778e-02, 1.3703409625482991e-05,
      -1.9701280330628469e-09, 2.1944550184416500e-11
    ];
    const y = x * x;
    const y2 = y * y;
    const p = P[0] + y * P[1] + y2 * (P[2] + y * P[3]);
    const q = Q[0] + y * Q[1] + y2 * (Q[2] + y * Q[3] + y2 * Q[4]);
    h = p / q - 1. / 24 * y2 * Math.log(x);
  } else {
    const P = [
      -4.5930112735784898e-01, 4.3720705508867954e-01, -7.5895226486465095e-02,
      5.2244176912488065e-03, -1.5677716622013956e-04, 1.6641624171748576e-06
    ];
    const Q = [
      1.0000000000000000e+00, -1.2211486825401188e-01, 3.8940070749313620e-03,
      -2.2674805547074318e-05, -7.4383354448335299e-08, -3.4131758392216437e-10
    ];
    const y = PI - x;
    const z = y * y - PI28;
    const z2 = z * z;
    const z4 = z2 * z2;
    const p = P[0] + z * P[1] + z2 * (P[2] + z * P[3]) + z4 * (P[4] + z * P[5]);
    const q = Q[0] + z * Q[1] + z2 * (Q[2] + z * Q[3]) + z4 * (Q[4] + z * Q[5]);
    h = p / q;
  }

  return h;
}

// Clausen function of order 6.
export function Cl6(x) {
  const PI = 3.14159265358979324;
  const PI2 = 2 * PI, PIH = PI / 2, PI28 = PI * PI / 8;
  let sgn = 1;

  if (x < 0) {
    x = -x;
    sgn = -1;
  }
  if (x >= PI2) x = x % PI2;
  if (x > PI) {
    const p0 = 6.28125;
    const p1 = 0.0019353071795864769253;
    x = (p0 - x) + p1;
    sgn = -sgn;
  }
  if (x == 0) return x;
  if (x == PI) return 0;

  let h = 0;

  if (x < PIH) {
    const P = [
      1.0369277551433699e+00, -2.087195444107175e-01, 2.0652251045312954e-02,
      -1.383438138256840e-04
    ];
    const Q = [
      1.0000000000000000e+00, -8.0784096827362542e-03, 5.8074568862993102e-06,
      -5.1960620033050114e-10
    ];
    const y = x * x;
    const y2 = y * y;
    const p = P[0] + y * P[1] + y2 * (P[2] + y * P[3]);
    const q = Q[0] + y * Q[1] + y2 * (Q[2] + y * Q[3]);
    h = x * (p / q - 1. / 120 * y2 * Math.log(x));
  } else {
    const P = [
      7.9544504578027050e-01, -1.9255025309738589e-01, 1.5805208288846591e-02,
      -5.4175380521534706e-04, 6.7577493541009068e-06
    ];
    const Q = [
      1.0000000000000000e+00, -7.0798422394109274e-02, 7.1744189715634762e-04,
      3.9098747334347093e-06, 3.5669441618295266e-08, 2.5315391843409925e-10
    ];
    const y = PI - x;
    const z = y * y - PI28;
    const z2 = z * z;
    const z4 = z2 * z2;
    const p = P[0] + z * P[1] + z2 * (P[2] + z * P[3]) + z4 * P[4];
    const q = Q[0] + z * Q[1] + z2 * (Q[2] + z * Q[3]) + z4 * (Q[4] + z * Q[5]);
    h = y * p / q;
  }

  return sgn * h;
}

function ncal(n, x) {
  const B = [
    -8.3333333333333333e-002, -1.3888888888888889e-003, -3.3068783068783069e-005,
    -8.2671957671957672e-007, -2.0876756987868099e-008, -5.2841901386874932e-010,
    -1.3382536530684679e-011, -3.3896802963225829e-013, -8.5860620562778446e-015,
    -2.1748686985580619e-016, -5.5090028283602295e-018, -1.3954464685812523e-019,
    -3.5347070396294675e-021, -8.9535174270375469e-023, -2.2679524523376831e-024,
    -5.7447906688722024e-026, -1.4551724756148649e-027, -3.6859949406653102e-029,
    -9.3367342570950447e-031, -2.3650224157006299e-032, -5.9906717624821343e-034,
    -1.5174548844682903e-035, -3.8437581254541882e-037, -9.7363530726466910e-039,
    -2.4662470442006810e-040, -6.2470767418207437e-042, -1.5824030244644914e-043,
    -4.0082736859489360e-045, -1.0153075855569556e-046, -2.5718041582418717e-048,
    -6.5144560352338149e-050, -1.6501309906896525e-051, -4.1798306285394759e-053,
    -1.0587634667702909e-054, -2.6818791912607707e-056, -6.7932793511074212e-058,
    -1.7207577616681405e-059, -4.3587303293488938e-061, -1.1040792903684667e-062,
    -2.7966655133781345e-064, -7.0840365016794702e-066, -1.7944074082892241e-067,
    -4.5452870636110961e-069, -1.1513346631982052e-070, -2.9163647710923614e-072,
    -7.3872382634973376e-074, -1.8712093117637953e-075, -4.7398285577617994e-077,
    -1.2006125993354507e-078, -3.0411872415142924e-080, -7.7034172747051063e-082,
    -1.9512983909098831e-083, -4.9426965651594615e-085, -1.2519996659171848e-086,
    -3.1713522017635155e-088, -8.0331289707353345e-090, -2.0348153391661466e-091,
    -5.1542474664474739e-093, -1.3055861352149467e-094, -3.3070883141750912e-096,
    -8.3769525600490913e-098, -2.1219068717497138e-099, -5.3748528956122803e-101,
    -1.3614661432172069e-102, -3.4486340279933990e-104, -8.7354920416383551e-106,
    -2.2127259833925497e-107, -5.6049003928372242e-109, -1.4197378549991788e-110,
    -3.5962379982587627e-112, -9.1093772660782319e-114, -2.3074322171091233e-115,
    -5.8447940852990020e-117, -1.4805036371705745e-118, -3.7501595226227197e-120,
    -9.4992650419929583e-122, -2.4061919444675199e-123, -6.0949553971026848e-125,
    -1.5438702377042471e-126, -3.9106689968592923e-128, -9.9058402898794298e-130,
    -2.5091786578563553e-131, -6.3558237896024598e-133, -1.6099489734616250e-134,
    -4.0780483898724622e-136, -1.0329817245315190e-137, -2.6165732752609202e-139,
    -6.6278575334086228e-141, -1.6788559257443673e-142, -4.2525917390343006e-144,
    -1.0771940713664573e-145, -2.7285644580839580e-147, -6.9115345134370137e-149,
    -1.7507121442157682e-150, -4.4346056667239196e-152, -1.1232987378487150e-153,
    -2.8453489425693971e-155, -7.2073530684151368e-157, -1.8256438595501418e-158,
    -4.6244099189746555e-160, -1.1713767165946985e-161, -2.9671318854112523e-163,
    -7.5158328663197353e-165, -1.9037827051837494e-166, -4.8223379271757316e-168,
    -1.2215124667619569e-169, -3.0941272241548313e-171, -7.8375158172837117e-173,
    -1.9852659485568249e-174, -5.0287373938151486e-176, -1.2737940624195893e-177,
    -3.2265580530233667e-179, -8.1729670255761088e-181, -2.0702367322529201e-182,
    -5.2439709032927841e-184, -1.3283133472690102e-185, -3.3646570148302941e-187,
    -8.5227757823275058e-189, -2.1588443254591854e-190, -5.4684165588767235e-192,
    -1.3851660959868732e-193, -3.5086667096656512e-195, -8.8875566007447618e-197,
    -2.2512443861893281e-198, -5.7024686469217722e-200, -1.4444521824735857e-201,
    -3.6588401210745441e-203, -9.2679502956336812e-205, -2.3475992347298971e-206,
    -5.9465383295169881e-208, -1.5062757553029781e-209, -3.8154410604763518e-211,
    -9.6646251091260105e-213, -2.4480781387902631e-214, -6.2010543667790175e-216,
    -1.5707454206813435e-217, -3.9787446306053875e-219, -1.0078277884588346e-220,
    -2.5528576108572180e-222, -6.4664638700600961e-224, -1.6379744332372530e-225,
    -4.1490377087871461e-227, -1.0509635290775169e-228, -2.6621217182765621e-230,
    -6.7432330873938832e-232, -1.7080808949773099e-233, -4.3266194508991167e-235,
    -1.0959455098376500e-236, -2.7760624066064009e-238, -7.0318482225589324e-240,
    -1.7811879627573501e-241, -4.5118018169014740e-243, -1.1428527511202687e-244,
    -2.8948798368101921e-246, -7.3328162891986569e-248, -1.8574240646335573e-249,
    -4.7049101188608530e-251, -1.1917676554344843e-252, -3.0187827368818927e-254,
    -7.6466660014982318e-256, -1.9369231254735576e-257, -4.9062835924299293e-259,
    -1.2427761521749539e-260, -3.1479887685209103e-262, -7.9739487029830971e-264,
    -2.0198248022238287e-265, -5.1162759927867278e-267, -1.2959678485750701e-268,
    -3.2827249095010017e-270, -8.3152393350706909e-272, -2.1062747292467202e-273,
    -5.3352562160805552e-275, -1.3514361871210552e-276, -3.4232278524048296e-278,
    -8.6711374470768819e-280, -2.1964247741580717e-281, -5.5636089474762561e-283,
    -1.4092786097034883e-284, -3.5697444204246398e-286, -9.0422682494513886e-288,
    -2.2904333046148606e-289, -5.8017353369352214e-291, -1.4695967287946349e-292,
    -3.7225320009595016e-294, -9.4292837120924187e-296, -2.3884654665215509e-297,
    -6.0500537039203004e-299, -1.5324965059522865e-300, -3.8818589977708149e-302,
    -9.8328637096699497e-304, -2.4906934741438690e-305, -6.3090002722625804e-307,
    -1.5980884379636898e-308, -4.0480053024903931e-310, -1.0253717215969654e-311,
    -2.5972969126396544e-313, -6.5790299364809836e-315, -1.6664877509565689e-316,
    -4.2212627863094242e-318, -1.0692583549355590e-319, -2.7084630535382438e-321,
    -6.8606170609008831e-323
  ];

  let sum = 0, old_sum = 0;
  const xn1 = Math.pow(x, n + 1);
  const x2 = x * x;
  let xn = xn1 * x2;
  for (let k = 1; k <= B.length; ++k) {
    old_sum = sum;
    sum += B[k - 1] * xn / (2 * k + n + 1);
    if (sum == old_sum) {
      break;
    }
    xn *= x2;
  }
  return (xn1 / (n + 1) + sum) / (n + 1);
}

// Clausen function.
// `n` is the order of Clausen function, integer 1 or greater.
export function Cl(n, x) {
  const inverse_factorial =
    [1.0, 1.0, 1.0 / 2, 1.0 / 6, 1.0 / 24, 1.0 / 120, 1.0 / 720, 1.0 / 5040, 1.0 / 40320];
  const zeta = [
    1.6449340668482264, 1.2020569031595943, 1.0823232337111382, 1.0369277551433699,
    1.0173430619844491, 1.0083492773819228, 1.0040773561979443, 1.0020083928260822
  ];
  const binomial = [
    [1, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0], [1, 2, 1, 0, 0, 0, 0, 0],
    [1, 3, 3, 1, 0, 0, 0, 0], [1, 4, 6, 4, 1, 0, 0, 0], [1, 5, 10, 10, 5, 1, 0, 0],
    [1, 6, 15, 20, 15, 6, 1, 0], [1, 7, 21, 35, 35, 21, 7, 1]
  ];

  if (n < 1) {
    return NaN;
  } else if (n == 1) {
    return Cl1(x);
  } else if (n == 2) {
    return Cl2(x);
  } else if (n == 3) {
    return Cl3(x);
  } else if (n == 4) {
    return Cl4(x);
  } else if (n == 5) {
    return Cl5(x);
  } else if (n == 6) {
    return Cl6(x);
  }

  const PI = 3.14159265358979324;
  const PI2 = 2 * Math.PI;
  let sgn = 1.0;
  if (n % 2 == 0) {
    if (x < 0) {
      x = -x;
      sgn = -1;
    }
    if (x >= PI2) x = x % PI2;
    if (x > PI) {
      const p0 = 6.28125;
      const p1 = 0.0019353071795864769253;
      x = (p0 - x) + p1;
      sgn = -sgn;
    }
  } else {
    if (x < 0) x = -x;
    if (x >= PI2) x = x % PI2;
    if (x > PI) {
      const p0 = 6.28125;
      const p1 = 0.0019353071795864769253;
      x = (p0 - x) + p1;
    }
  }

  if (n % 2 == 0) {
    if (x == 0) return x;
    if (x == PI) return 0;
  }

  if (n <= 9) {
    const sign1 = Math.floor((n + 1) / 2) % 2 == 0 ? 1.0 : -1.0;

    const term1 = x == 0 ? 0
                         : (sign1 * Math.pow(x, n - 1) * inverse_factorial[n - 1]
                            * Math.log(2 * Math.sin(x / 2)));

    const sign2 = Math.floor(n / 2) % 2 == 0 ? 1.0 : -1.0;

    let pcal = 0;
    const x2 = x * x;
    for (let i = 3; i <= n; i += 2) {
      const sign = Math.floor((n - 1) / 2 + (i - 1) / 2) % 2 == 0 ? 1.0 : -1.0;
      pcal = x2 * pcal + sign * zeta[i - 2] * inverse_factorial[n - i];
    }
    if (n % 2 == 0) pcal *= x;

    let nsum = 0;
    let xn = 1;
    for (let i = 0; i <= n - 3; ++i) {
      nsum += binomial[n - 2][i] * xn * ncal(n - 2 - i, x);
      xn *= -x;
    }
    nsum += xn * ncal(0, x);

    const term2 = pcal - sign2 * inverse_factorial[n - 2] * nsum;
    return sgn * (term1 + term2);
  }

  const kmax = Math.ceil(Math.pow(Number.EPSILON, -1.0 / n));
  const co = Math.cos(x);
  let cl_series = 0;
  if (n % 2 == 0) {
    let si = Math.sin(x);
    let si2 = 0;  // sin((n-2)*x)
    let si1 = si; // sin((n-1)*x)
    cl_series = si;
    for (let k = 2; k <= kmax; ++k) {
      si = 2 * co * si1 - si2; // sin(n*x)
      si2 = si1;
      si1 = si;
      cl_series += si * Math.pow(k, -n);
    }
  } else {
    let co2 = 1;  // cos((n-2)*x)
    let co1 = co; // cos((n-1)*x)
    cl_series = co;
    for (let k = 2; k <= kmax; ++k) {
      const con = 2 * co * co1 - co2; // cos(n*x)
      co2 = co1;
      co1 = con;
      cl_series += con * Math.pow(k, -n);
    }
  }
  return sgn * cl_series;
}

// Glaisher–Clausen function.
// `n` is the order of Glaisher–Clausen function, integer 1 or greater.
export function Sl(n, x) {
  const PI = 3.14159265358979324;
  const PI2 = 2 * PI;
  const PI_POW2 = PI * PI;

  if (n < 1) return NaN;

  let sgn = 1.0;
  if (n % 2 == 0) {
    if (x < 0) x = -x;
    if (x >= PI2) x = x % PI2;
    if (x > PI) {
      const p0 = 6.28125;
      const p1 = 0.0019353071795864769253;
      x = (p0 - x) + p1;
    }
  } else {
    if (x < 0) {
      x = -x;
      sgn = -1;
    }
    if (x >= PI2) x = x % PI2;
    if (x > PI) {
      const p0 = 6.28125;
      const p1 = 0.0019353071795864769253;
      x = (p0 - x) + p1;
      sgn = -sgn;
    }
  }

  if (!(n % 2 == 0) && x == 0) return x;
  if (n == 1) return sgn * (PI / 2 - 1. / 2 * x);
  if (n == 2) return sgn * (PI_POW2 / 6 + (-1. / 2 * PI + 1. / 4 * x) * x);
  if (n == 3) return sgn * (x * (PI_POW2 / 6 + (-1. / 4 * PI + 1. / 12 * x) * x));

  const x2 = x * x;

  if (n == 4) {
    return sgn
      * (1.08232323371113819151600369654116790324
         + (-0.82246703342411321823620758332301259476
            + (0.26179938779914943653855361527329190704
               - 0.02083333333333333333333333333333333333 * x)
              * x)
           * x2);
  }
  if (n == 5) {
    return sgn
      * (x
         * (1.08232323371113819151600369654116790324 + (-0.27415567780803773941206919444100419825 + (0.06544984694978735913463840381832297676 - 0.00416666666666666666666666666666666667 * x) * x) * x2));
  }
  if (n == 6) {
    return sgn
      * (1.01734306198444913971451792979092052962
         + x2
           * (-0.54116161685556909575800184827058395148 + (0.06853891945200943485301729861025104957 + (-0.01308996938995747182692768076366459535 + 0.00069444444444444444444444444444444444 * x) * x) * x2));
  }
  if (n == 7) {
    return sgn
      * (x
         * (1.01734306198444913971451792979092052962 + x2 * (-0.18038720561852303191933394942352798392 + (0.0137077838904018869706034597220502099 + (-0.00218166156499291197115461346061076589 + 0.00009920634920634920634920634920634921 * x) * x) * x2)));
  }
  if (n == 8) {
    return sgn
      * (1.00407735619794433937868523850865245599
         + x2
           * (-0.50867153099222456985725896489546026481 + x2 * (0.04509680140463075797983348735588199584 + (-0.00228463064840031449510057662034170166 + (0.00031166593785613028159351620865868084 - 0.00001240079365079365079365079365079365 * x) * x) * x2)));
  }
  if (n == 9) {
    return sgn
      * (x
         * (1.00407735619794433937868523850865245599 + x2 * (-0.1695571769974081899524196549651534216 + x2 * (0.00901936028092615159596669747117639928 + (-0.00032637580691433064215722523147738596 + (0.00003895824223201628519918952608233511 - 1.37786596119929453262786596119929e-6 * x) * x) * x2))));
  }
  if (n == 10) {
    return sgn
      * (1.00099457512781808533714595890031902742
         + x2
           * (-0.50203867809897216968934261925432624194 + x2 * (0.0423892942493520474881049137412883547 + x2 * (-0.0015032267134876919326611162451960666 + (0.00004079697586429133026965315393467323 + (-4.32869358133514279990994734248167e-6 + 1.3778659611992945326278659611993e-7 * x) * x) * x2))));
  }
  if (n == 11) {
    return sgn
      * (x
         * (1.00099457512781808533714595890031902742 + x2 * (-0.16734622603299072322978087308477541398 + x2 * (0.00847785884987040949762098274825766981 + x2 * (-0.00021474667335538456180873089217086662 + (4.53299731825459225218368377051925e-6 + (-4.3286935813351427999099473424817e-7 + 1.252605419272085938752605419272e-8 * x) * x) * x2)))));
  }
  if (n == 12) {
    return sgn * (1.00024608655330804829863799804773972216 + x2 * (-0.50049728756390904266857297945015937611 + x2 * (0.04183655650824768080744521827119384652 + x2 * (-0.00141297647497840158293683045804294403 + x2 * (0.00002684333416942307022609136152135836 + (-4.5329973182545922521836837705192e-7 + (3.935175983031947999918133947711e-8 - 1.04383784939340494896050451606e-9 * x) * x) * x2)))));
  }
  if (n == 13) {
    return sgn
      * (x
         * (1.00024608655330804829863799804773972216 + x2 * (-0.16683242918796968088952432648338636697 + x2 * (0.00836731130164953616148904365423876373 + x2 * (-0.00020185378213977165470526149400613446 + x2 * (2.98259268549145224734348461348417e-6 + (-4.120906652958720229257894336836e-8 + (3.27931331919328999993177828976e-9 - 8.029521918410807299696188585e-11 * x) * x) * x2))))));
  }
  if (n == 14) {
    return sgn
      * (1.00006124813505870482925854510513864395
         + x2 * (-0.50012304327665402414931899902386850299 + x2 * (0.04170810729699242022238108162084659174 + x2 * (-0.0013945518836082560269148406090398079 + x2 * (0.0000252317227674714568381576867507661 + x2 * (-2.9825926854914522473434846134856e-7 + (3.4340888774656001910482452807e-9 + (-2.5225487070717615384090602229e-10 + 5.73537279886486235692584899e-12 * x) * x) * x2))))));
  }
  if (n == 15) {
    return sgn
      * (x
         * (1.00006124813505870482925854510513864395 + x2 * (-0.16670768109221800804977299967462192893 + x2 * (0.00834162145939848404447621632416931835 + x2 * (-0.00019922169765832228955926294414853602 + x2 * (2.80352475194127298201752075008418e-6 + x2 * (-2.711447895901320224857713284997e-8 + (2.6416068288196924546524963697e-10 + (-1.801820505051258241720757302e-11 + 3.823581865909908237950565992894035222077550119e-13 * x) * x) * x2)))))));
  }
  if (n == 16) {
    return sgn
      * (1.00001528225940865187173257148771504874
         + x2
           * (-0.50003062406752935241462927255256932198 + x2 * (0.04167692027305450201244324991865684033 + x2 * (-0.00139027024323308067407936938736164479 + x2 * (0.000024902712207290286194907868018567 + x2 * (-2.8035247519412729820175207500757e-7 + x2 * (2.25953991325110018738142773754e-9 + (-1.886862020585494610466068836e-11 + (1.2012136700341721611471715347102004543167177933e-12 - 2.38973866619369264871910374555877201379846882e-14 * x) * x) * x2)))))));
  }
  if (n == 17) {
    return sgn
      * (x * (1.00001528225940865187173257148771504874 + x2 * (-0.16667687468917645080487642418418977399 + x2 * (0.00833538405461090040248864998373245454 + x2 * (-0.00019861003474758295343990991248027429 + x2 * (2.76696802303225402165642977983148e-6 + x2 * (-2.548658865401157256379564318122e-8 + x2 * (1.7381076255777693749087905673e-10 + (-1.2579080137236630736440458903649820484513744495e-12 + (7.5075854377135760071698220919387528394794862e-14 - 1.4057286271727603815994727915051600081167463e-15 * x) * x) * x2))))))));
  }
  if (n == 18) {
    return sgn
      * (1.00000381729326499983985646162931158806
         + x2 * (-0.50000764112970432593586628574372523391 + x2 * (0.04166921867229411270121910604605414541 + x2 * (-0.00138923067576848340041477499728783703 + x2 * (0.00002482625434344786917998873906006869 + x2 * (-2.766968023032254021656429779943e-7 + x2 * (2.12388238783429771364963693188e-9 + x2 * (-1.241505446841263839220564691e-11 + (7.86192508577289421027528681478113780282109019e-14 + (-4.4162267280668094159822482893757369643996976e-15 + 7.80960348429311323110818217502866671175969e-17 * x) * x) * x2))))))));
  }
  if (n == 19) {
    return sgn
      * (x
         * (1.00000381729326499983985646162931158806 + x2 * (-0.16666921370990144197862209524782021767 + x2 * (0.00833384373445882254024382120921082908 + x2 * (-0.00019846152510978334291639642818358869 + x2 * (2.75847270482754101999874878432976e-6 + x2 * (-2.515425475483867292414936163492e-8 + x2 * (1.6337556829494597797304899476e-10 + x2 * (-8.276702978941758928137097939516758220936903338e-13 + (4.6246618151605260060442863616359634134241695e-15 + (-2.453459293370449675545693494097631646888718e-16 + 4.1103176233121648584779906184361403746102e-18 * x) * x) * x2)))))))));
  }
  if (n == 20) {
    return sgn * (1.00000095396203387279611315203997344306 + x2 * (-0.50000190864663249991992823081465579403 + x2 * (0.04166730342747536049465552381188890919 + x2 * (-0.00138897395574313709004063686821074073 + x2 * (0.00002480769063872291786454955352193002 + x2 * (-2.7584727048275410199987487844475e-7 + x2 * (2.09618789623655607701244680291e-9 + x2 * (-1.166968344963899842664635677e-11 + x2 * (5.17293936183859933008568621219797388808556372e-14 + (-2.569256563978070003357936867575535229680093e-16 + (1.2912943649318156187082597337355956036256e-17 - 2.055158811656082429238995309218070187304e-19 * x) * x) * x2)))))))));
  }
  if (n == 21) {
    return sgn * (x * (1.00000095396203387279611315203997344306 + x2 * (-0.16666730288221083330664274360488526468 + x2 * (0.0083334606854950720989311047624836142 + x2 * (-0.00019842485082044815572009098117679263 + x2 * (2.7564100709692130960610615025566e-6 + x2 * (-2.507702458934128199998862531316e-8 + x2 * (1.6124522278742739053941898484e-10 + x2 * (-7.779788966425998951097571179057633165274733065e-13 + x2 * (3.0429055069638819588739330659988081694620908e-15 + (-1.3522402968305631596620720355660711735158e-17 + (6.456471824659078093541298668677978018124e-19 - 9.7864705316956306154237871867527151777e-21 * x) * x) * x2))))))))));
  }
  if (n == 22) {
    return sgn
      * (1.00000023845050272773299000364796200809
         + x2 * (-0.50000047698101693639805657600710042819 + x2 * (0.04166682572055270832666068589991566168 + x2 * (-0.00138891011424917868315518412712469919 + x2 * (0.00002480310635255601946501137264645673 + x2 * (-2.7564100709692130960610615025566e-7 + x2 * (2.08975204911177349999905210943e-9 + x2 * (-1.151751591338767075281564177e-11 + x2 * (4.86236810401624934443598198691102072829670529e-14 + x2 * (-1.690503059424378866041073925554893427478879e-16 + (6.76120148415281579831036017783035586758e-19 + (-3.07451039269479909216252317556094191341e-20 + 4.448395696225286643374448721251234172e-22 * x) * x) * x2))))))))));
  }
  if (n == 23) {
    return sgn
      * (x
         * (1.00000023845050272773299000364796200809 + x2 * (-0.16666682566033897879935219201095767162 + x2 * (0.00833336514411054166533213718024137805 + x2 * (-0.00019841573060702552616502630386659459 + x2 * (2.75590070583955771833459696071741e-6 + x2 * (-2.505827337244739178237328638688e-8 + x2 * (1.6075015762398257692300400842e-10 + x2 * (-7.678343942258447168543761182819578413904206358e-13 + x2 * (2.8602165317742643202564599923006004284098087e-15 + x2 * (-8.8973845232862045581109153976573338288322e-18 + (3.21961975435848371348112389420493136549e-20 + (-1.397504723952181405528419625254973597e-21 + 1.93408508531534201885845596576140617e-23 * x) * x) * x2)))))))))));
  }
  if (n == 24) {
    return sgn * (1.00000005960818905125947961244022532705 + x2 * (-0.50000011922525136386649500182398100405 + x2 * (0.04166670641508474469983804800148527986 + x2 * (-0.00138889419068509027755535619670689634 + x2 * (0.00002480196632587819077062828798332432 + x2 * (-2.7559007058395577183345969607174e-7 + x2 * (2.08818944770394931519777386557e-9 + x2 * (-1.148215411599875549450028632e-11 + x2 * (4.79896496391152948033985073926223650869004394e-14 + x2 * (-1.589009184319035733475811106833666904671266e-16 + x2 * (4.448692261643102279055457698828666914377e-19 + (-1.4634635247084016879459654064567869849e-21 + (6.0761074954442669805583461967607548e-23 - 8.058687855480591745243566524005859e-25 * x) * x) * x2)))))))))));
  }
  if (n == 25) {
    return sgn
      * (x * (1.00000005960818905125947961244022532705 + x2 * (-0.16666670640841712128883166727466033468 + x2 * (0.00833334128301694893996760960029705597 + x2 * (-0.00019841345581215575393647945667241376 + x2 * (2.75577403620868786340314310925826e-6 + x2 * (-2.505364278035961562122360873379e-8 + x2 * (1.6062995751568840886136722043e-10 + x2 * (-7.654769410665836996333524210366101004611481858e-13 + x2 * (2.822920567006782047258735728977786181582112e-15 + x2 * (-8.3632062332580828077674268780719310772978e-18 + x2 * (2.11842488649671537097878938039460329257e-20 + (-6.3628848900365290780259365498121174e-23 + (2.5317114564351112418993109153169811e-24 - 3.22347514219223669809742660960235e-26 * x) * x) * x2))))))))))));
  }

  // returns Sl(n,x) using the naive series expansion
  const kmax = Math.ceil(Math.pow(Number.EPSILON, -1.0 / n));
  const co = Math.cos(x);
  let sl_series = 0;
  if (n % 2 == 0) {
    let co2 = 1;  // cos((n-2)*x)
    let co1 = co; // cos((n-1)*x)
    sl_series = co;
    for (let k = 2; k <= kmax; ++k) {
      const con = 2 * co * co1 - co2; // cos(n*x)
      co2 = co1;
      co1 = con;
      sl_series += con * Math.pow(k, -n);
    }
  } else {
    let si = Math.sin(x);
    let si2 = 0;  // sin((n-2)*x)
    let si1 = si; // sin((n-1)*x)
    sl_series = si;
    for (let k = 2; k <= kmax; ++k) {
      si = 2 * co * si1 - si2; // sin(n*x)
      si2 = si1;
      si1 = si;
      sl_series += si * Math.pow(k, -n);
    }
  }
  return sgn * sl_series;
}
